/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkcs50w_final_project"] = self["webpackChunkcs50w_final_project"] || []).push([["vendors-node_modules_headlessui_react_dist_headlessui_esm_js"],{

/***/ "./node_modules/@headlessui/react/dist/headlessui.esm.js":
/*!***************************************************************!*\
  !*** ./node_modules/@headlessui/react/dist/headlessui.esm.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Dialog\": () => (/* binding */ Dialog),\n/* harmony export */   \"Disclosure\": () => (/* binding */ Disclosure),\n/* harmony export */   \"FocusTrap\": () => (/* binding */ FocusTrap),\n/* harmony export */   \"Listbox\": () => (/* binding */ Listbox),\n/* harmony export */   \"Menu\": () => (/* binding */ Menu),\n/* harmony export */   \"Popover\": () => (/* binding */ Popover),\n/* harmony export */   \"Portal\": () => (/* binding */ Portal),\n/* harmony export */   \"RadioGroup\": () => (/* binding */ RadioGroup),\n/* harmony export */   \"Switch\": () => (/* binding */ Switch),\n/* harmony export */   \"Transition\": () => (/* binding */ Transition)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"./node_modules/react-dom/index.js\");\n\n\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      return function () {\n        if (i >= o.length) return {\n          done: true\n        };\n        return {\n          done: false,\n          value: o[i++]\n        };\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  it = o[Symbol.iterator]();\n  return it.next.bind(it);\n}\n\nfunction match(value, lookup) {\n  if (value in lookup) {\n    var returnValue = lookup[value];\n\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    return typeof returnValue === 'function' ? returnValue.apply(void 0, args) : returnValue;\n  }\n\n  var error = new Error(\"Tried to handle \\\"\" + value + \"\\\" but there is no handler defined. Only defined handlers are: \" + Object.keys(lookup).map(function (key) {\n    return \"\\\"\" + key + \"\\\"\";\n  }).join(', ') + \".\");\n  if (Error.captureStackTrace) Error.captureStackTrace(error, match);\n  throw error;\n}\n\nvar Features;\n\n(function (Features) {\n  /** No features at all */\n  Features[Features[\"None\"] = 0] = \"None\";\n  /**\r\n   * When used, this will allow us to use one of the render strategies.\r\n   *\r\n   * **The render strategies are:**\r\n   *    - **Unmount**   _(Will unmount the component.)_\r\n   *    - **Hidden**    _(Will hide the component using the [hidden] attribute.)_\r\n   */\n\n  Features[Features[\"RenderStrategy\"] = 1] = \"RenderStrategy\";\n  /**\r\n   * When used, this will allow the user of our component to be in control. This can be used when\r\n   * you want to transition based on some state.\r\n   */\n\n  Features[Features[\"Static\"] = 2] = \"Static\";\n})(Features || (Features = {}));\n\nvar RenderStrategy;\n\n(function (RenderStrategy) {\n  RenderStrategy[RenderStrategy[\"Unmount\"] = 0] = \"Unmount\";\n  RenderStrategy[RenderStrategy[\"Hidden\"] = 1] = \"Hidden\";\n})(RenderStrategy || (RenderStrategy = {}));\n\nfunction render(_ref) {\n  var props = _ref.props,\n      slot = _ref.slot,\n      defaultTag = _ref.defaultTag,\n      features = _ref.features,\n      _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? true : _ref$visible,\n      name = _ref.name;\n  // Visible always render\n  if (visible) return _render(props, slot, defaultTag, name);\n  var featureFlags = features != null ? features : Features.None;\n\n  if (featureFlags & Features.Static) {\n    var _props$static = props[\"static\"],\n        isStatic = _props$static === void 0 ? false : _props$static,\n        rest = _objectWithoutPropertiesLoose(props, [\"static\"]); // When the `static` prop is passed as `true`, then the user is in control, thus we don't care about anything else\n\n\n    if (isStatic) return _render(rest, slot, defaultTag, name);\n  }\n\n  if (featureFlags & Features.RenderStrategy) {\n    var _match;\n\n    var _props$unmount = props.unmount,\n        unmount = _props$unmount === void 0 ? true : _props$unmount,\n        _rest = _objectWithoutPropertiesLoose(props, [\"unmount\"]);\n\n    var strategy = unmount ? RenderStrategy.Unmount : RenderStrategy.Hidden;\n    return match(strategy, (_match = {}, _match[RenderStrategy.Unmount] = function () {\n      return null;\n    }, _match[RenderStrategy.Hidden] = function () {\n      return _render(_extends({}, _rest, {\n        hidden: true,\n        style: {\n          display: 'none'\n        }\n      }), slot, defaultTag, name);\n    }, _match));\n  } // No features enabled, just render\n\n\n  return _render(props, slot, defaultTag, name);\n}\n\nfunction _render(props, slot, tag, name) {\n  var _ref2;\n\n  if (slot === void 0) {\n    slot = {};\n  }\n\n  var _omit = omit(props, ['unmount', 'static']),\n      _omit$as = _omit.as,\n      Component = _omit$as === void 0 ? tag : _omit$as,\n      children = _omit.children,\n      _omit$refName = _omit.refName,\n      refName = _omit$refName === void 0 ? 'ref' : _omit$refName,\n      passThroughProps = _objectWithoutPropertiesLoose(_omit, [\"as\", \"children\", \"refName\"]); // This allows us to use `<HeadlessUIComponent as={MyComponent} refName=\"innerRef\" />`\n\n\n  var refRelatedProps = props.ref !== undefined ? (_ref2 = {}, _ref2[refName] = props.ref, _ref2) : {};\n  var resolvedChildren = typeof children === 'function' ? children(slot) : children; // Allow for className to be a function with the slot as the contents\n\n  if (passThroughProps.className && typeof passThroughProps.className === 'function') {\n    passThroughProps.className = passThroughProps.className(slot);\n  }\n\n  if (Component === react__WEBPACK_IMPORTED_MODULE_0__.Fragment) {\n    if (Object.keys(passThroughProps).length > 0) {\n      if (!(0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(resolvedChildren) || Array.isArray(resolvedChildren) && resolvedChildren.length > 1) {\n        throw new Error(['Passing props on \"Fragment\"!', '', \"The current component <\" + name + \" /> is rendering a \\\"Fragment\\\".\", \"However we need to passthrough the following props:\", Object.keys(passThroughProps).map(function (line) {\n          return \"  - \" + line;\n        }).join('\\n'), '', 'You can apply a few solutions:', ['Add an `as=\"...\"` prop, to ensure that we render an actual element instead of a \"Fragment\".', 'Render a single element as the child so that we can forward the props onto that element.'].map(function (line) {\n          return \"  - \" + line;\n        }).join('\\n')].join('\\n'));\n      }\n\n      return (0,react__WEBPACK_IMPORTED_MODULE_0__.cloneElement)(resolvedChildren, Object.assign({}, // Filter out undefined values so that they don't override the existing values\n      mergeEventFunctions(compact(omit(passThroughProps, ['ref'])), resolvedChildren.props, ['onClick']), refRelatedProps));\n    }\n  }\n\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(Component, Object.assign({}, omit(passThroughProps, ['ref']), Component !== react__WEBPACK_IMPORTED_MODULE_0__.Fragment && refRelatedProps), resolvedChildren);\n}\n/**\r\n * We can use this function for the following useCase:\r\n *\r\n * <Menu.Item> <button onClick={console.log} /> </Menu.Item>\r\n *\r\n * Our `Menu.Item` will have an internal `onClick`, if you passthrough an `onClick` to the actual\r\n * `Menu.Item` component we will call it correctly. However, when we have an `onClick` on the actual\r\n * first child, that one should _also_ be called (but before this implementation, it was just\r\n * overriding the `onClick`). But it is only when we *render* that we have access to the existing\r\n * props of this component.\r\n *\r\n * It's a bit hacky, and not that clean, but it is something internal and we have tests to rely on\r\n * so that we can refactor this later (if needed).\r\n */\n\n\nfunction mergeEventFunctions(passThroughProps, existingProps, functionsToMerge) {\n  var clone = Object.assign({}, passThroughProps);\n\n  var _loop = function _loop() {\n    var func = _step.value;\n\n    if (passThroughProps[func] !== undefined && existingProps[func] !== undefined) {\n      var _Object$assign;\n\n      Object.assign(clone, (_Object$assign = {}, _Object$assign[func] = function (event) {\n        // Props we control\n        if (!event.defaultPrevented) passThroughProps[func](event); // Existing props on the component\n\n        if (!event.defaultPrevented) existingProps[func](event);\n      }, _Object$assign));\n    }\n  };\n\n  for (var _iterator = _createForOfIteratorHelperLoose(functionsToMerge), _step; !(_step = _iterator()).done;) {\n    _loop();\n  }\n\n  return clone;\n}\n/**\r\n * This is a hack, but basically we want to keep the full 'API' of the component, but we do want to\r\n * wrap it in a forwardRef so that we _can_ passthrough the ref\r\n */\n\n\nfunction forwardRefWithAs(component) {\n  var _component$displayNam;\n\n  return Object.assign((0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(component), {\n    displayName: (_component$displayNam = component.displayName) != null ? _component$displayNam : component.name\n  });\n}\n\nfunction compact(object) {\n  var clone = Object.assign({}, object);\n\n  for (var key in clone) {\n    if (clone[key] === undefined) delete clone[key];\n  }\n\n  return clone;\n}\n\nfunction omit(object, keysToOmit) {\n  if (keysToOmit === void 0) {\n    keysToOmit = [];\n  }\n\n  var clone = Object.assign({}, object);\n\n  for (var _iterator2 = _createForOfIteratorHelperLoose(keysToOmit), _step2; !(_step2 = _iterator2()).done;) {\n    var key = _step2.value;\n    if (key in clone) delete clone[key];\n  }\n\n  return clone;\n}\n\nfunction useSyncRefs() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n\n  var cache = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(refs);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    cache.current = refs;\n  }, [refs]);\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (value) {\n    for (var _iterator = _createForOfIteratorHelperLoose(cache.current), _step; !(_step = _iterator()).done;) {\n      var ref = _step.value;\n      if (ref == null) continue;\n      if (typeof ref === 'function') ref(value);else ref.current = value;\n    }\n  }, [cache]);\n}\n\n// TODO: This must already exist somewhere, right? 🤔\n// Ref: https://www.w3.org/TR/uievents-key/#named-key-attribute-values\nvar Keys;\n\n(function (Keys) {\n  Keys[\"Space\"] = \" \";\n  Keys[\"Enter\"] = \"Enter\";\n  Keys[\"Escape\"] = \"Escape\";\n  Keys[\"Backspace\"] = \"Backspace\";\n  Keys[\"ArrowLeft\"] = \"ArrowLeft\";\n  Keys[\"ArrowUp\"] = \"ArrowUp\";\n  Keys[\"ArrowRight\"] = \"ArrowRight\";\n  Keys[\"ArrowDown\"] = \"ArrowDown\";\n  Keys[\"Home\"] = \"Home\";\n  Keys[\"End\"] = \"End\";\n  Keys[\"PageUp\"] = \"PageUp\";\n  Keys[\"PageDown\"] = \"PageDown\";\n  Keys[\"Tab\"] = \"Tab\";\n})(Keys || (Keys = {}));\n\n// See: https://github.com/facebook/react/issues/7711\n// See: https://github.com/facebook/react/pull/20612\n// See: https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#concept-fe-disabled (2.)\nfunction isDisabledReactIssue7711(element) {\n  var _ref, _parent;\n\n  var parent = element.parentElement;\n  var legend = null;\n\n  while (parent && !(parent instanceof HTMLFieldSetElement)) {\n    if (parent instanceof HTMLLegendElement) legend = parent;\n    parent = parent.parentElement;\n  }\n\n  var isParentDisabled = (_ref = ((_parent = parent) == null ? void 0 : _parent.getAttribute('disabled')) === '') != null ? _ref : false;\n  if (isParentDisabled && isFirstLegend(legend)) return false;\n  return isParentDisabled;\n}\n\nfunction isFirstLegend(element) {\n  if (!element) return false;\n  var previous = element.previousElementSibling;\n\n  while (previous !== null) {\n    if (previous instanceof HTMLLegendElement) return false;\n    previous = previous.previousElementSibling;\n  }\n\n  return true;\n}\n\nvar useIsoMorphicEffect = typeof window !== 'undefined' ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\n\nvar state = {\n  serverHandoffComplete: false\n};\nfunction useServerHandoffComplete() {\n  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(state.serverHandoffComplete),\n      serverHandoffComplete = _useState[0],\n      setServerHandoffComplete = _useState[1];\n\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    if (serverHandoffComplete === true) return;\n    setServerHandoffComplete(true);\n  }, [serverHandoffComplete]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    if (state.serverHandoffComplete === false) state.serverHandoffComplete = true;\n  }, []);\n  return serverHandoffComplete;\n}\n\n// didn't take care of the Suspense case. To fix this we used the approach the @reach-ui/auto-id\n// uses.\n//\n// Credits: https://github.com/reach/reach-ui/blob/develop/packages/auto-id/src/index.tsx\n\nvar id = 0;\n\nfunction generateId() {\n  return ++id;\n}\n\nfunction useId() {\n  var ready = useServerHandoffComplete();\n\n  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(ready ? generateId : null),\n      id = _useState[0],\n      setId = _useState[1];\n\n  useIsoMorphicEffect(function () {\n    if (id === null) setId(generateId());\n  }, [id]);\n  return id != null ? '' + id : undefined;\n}\n\n//  - https://stackoverflow.com/a/30753870\n\nvar focusableSelector = /*#__PURE__*/['[contentEditable=true]', '[tabindex]', 'a[href]', 'area[href]', 'button:not([disabled])', 'iframe', 'input:not([disabled])', 'select:not([disabled])', 'textarea:not([disabled])'].map( false ? // TODO: Remove this once JSDOM fixes the issue where an element that is\n// \"hidden\" can be the document.activeElement, because this is not possible\n// in real browsers.\n// TODO: Remove this once JSDOM fixes the issue where an element that is\n0 : function (selector) {\n  return selector + \":not([tabindex='-1'])\";\n}).join(',');\nvar Focus;\n\n(function (Focus) {\n  /** Focus the first non-disabled element */\n  Focus[Focus[\"First\"] = 1] = \"First\";\n  /** Focus the previous non-disabled element */\n\n  Focus[Focus[\"Previous\"] = 2] = \"Previous\";\n  /** Focus the next non-disabled element */\n\n  Focus[Focus[\"Next\"] = 4] = \"Next\";\n  /** Focus the last non-disabled element */\n\n  Focus[Focus[\"Last\"] = 8] = \"Last\";\n  /** Wrap tab around */\n\n  Focus[Focus[\"WrapAround\"] = 16] = \"WrapAround\";\n  /** Prevent scrolling the focusable elements into view */\n\n  Focus[Focus[\"NoScroll\"] = 32] = \"NoScroll\";\n})(Focus || (Focus = {}));\n\nvar FocusResult;\n\n(function (FocusResult) {\n  /** Something went wrong while trying to focus. */\n  FocusResult[FocusResult[\"Error\"] = 0] = \"Error\";\n  /** When `Focus.WrapAround` is enabled, going from position `N` to `N+1` where `N` is the last index in the array, then we overflow. */\n\n  FocusResult[FocusResult[\"Overflow\"] = 1] = \"Overflow\";\n  /** Focus was successful. */\n\n  FocusResult[FocusResult[\"Success\"] = 2] = \"Success\";\n  /** When `Focus.WrapAround` is enabled, going from position `N` to `N-1` where `N` is the first index in the array, then we underflow. */\n\n  FocusResult[FocusResult[\"Underflow\"] = 3] = \"Underflow\";\n})(FocusResult || (FocusResult = {}));\n\nvar Direction;\n\n(function (Direction) {\n  Direction[Direction[\"Previous\"] = -1] = \"Previous\";\n  Direction[Direction[\"Next\"] = 1] = \"Next\";\n})(Direction || (Direction = {}));\n\nfunction getFocusableElements(container) {\n  if (container === void 0) {\n    container = document.body;\n  }\n\n  if (container == null) return [];\n  return Array.from(container.querySelectorAll(focusableSelector));\n}\nvar FocusableMode;\n\n(function (FocusableMode) {\n  /** The element itself must be focusable. */\n  FocusableMode[FocusableMode[\"Strict\"] = 0] = \"Strict\";\n  /** The element should be inside of a focusable element. */\n\n  FocusableMode[FocusableMode[\"Loose\"] = 1] = \"Loose\";\n})(FocusableMode || (FocusableMode = {}));\n\nfunction isFocusableElement(element, mode) {\n  var _match;\n\n  if (mode === void 0) {\n    mode = FocusableMode.Strict;\n  }\n\n  if (element === document.body) return false;\n  return match(mode, (_match = {}, _match[FocusableMode.Strict] = function () {\n    return element.matches(focusableSelector);\n  }, _match[FocusableMode.Loose] = function () {\n    var next = element;\n\n    while (next !== null) {\n      if (next.matches(focusableSelector)) return true;\n      next = next.parentElement;\n    }\n\n    return false;\n  }, _match));\n}\nfunction focusElement(element) {\n  element == null ? void 0 : element.focus({\n    preventScroll: true\n  });\n}\nfunction focusIn(container, focus) {\n  var elements = Array.isArray(container) ? container : getFocusableElements(container);\n  var active = document.activeElement;\n\n  var direction = function () {\n    if (focus & (Focus.First | Focus.Next)) return Direction.Next;\n    if (focus & (Focus.Previous | Focus.Last)) return Direction.Previous;\n    throw new Error('Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last');\n  }();\n\n  var startIndex = function () {\n    if (focus & Focus.First) return 0;\n    if (focus & Focus.Previous) return Math.max(0, elements.indexOf(active)) - 1;\n    if (focus & Focus.Next) return Math.max(0, elements.indexOf(active)) + 1;\n    if (focus & Focus.Last) return elements.length - 1;\n    throw new Error('Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last');\n  }();\n\n  var focusOptions = focus & Focus.NoScroll ? {\n    preventScroll: true\n  } : {};\n  var offset = 0;\n  var total = elements.length;\n  var next = undefined;\n\n  do {\n    var _next;\n\n    // Guard against infinite loops\n    if (offset >= total || offset + total <= 0) return FocusResult.Error;\n    var nextIdx = startIndex + offset;\n\n    if (focus & Focus.WrapAround) {\n      nextIdx = (nextIdx + total) % total;\n    } else {\n      if (nextIdx < 0) return FocusResult.Underflow;\n      if (nextIdx >= total) return FocusResult.Overflow;\n    }\n\n    next = elements[nextIdx]; // Try the focus the next element, might not work if it is \"hidden\" to the user.\n\n    (_next = next) == null ? void 0 : _next.focus(focusOptions); // Try the next one in line\n\n    offset += direction;\n  } while (next !== document.activeElement); // This is a little weird, but let me try and explain: There are a few scenario's\n  // in chrome for example where a focused `<a>` tag does not get the default focus\n  // styles and sometimes they do. This highly depends on whether you started by\n  // clicking or by using your keyboard. When you programmatically add focus `anchor.focus()`\n  // then the active element (document.activeElement) is this anchor, which is expected.\n  // However in that case the default focus styles are not applied *unless* you\n  // also add this tabindex.\n\n\n  if (!next.hasAttribute('tabindex')) next.setAttribute('tabindex', '0');\n  return FocusResult.Success;\n}\n\nfunction useWindowEvent(type, listener, options) {\n  var listenerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(listener);\n  listenerRef.current = listener;\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    function handler(event) {\n      listenerRef.current.call(window, event);\n    }\n\n    window.addEventListener(type, handler, options);\n    return function () {\n      return window.removeEventListener(type, handler, options);\n    };\n  }, [type, options]);\n}\n\nfunction useIsMounted() {\n  var mounted = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    mounted.current = true;\n    return function () {\n      mounted.current = false;\n    };\n  }, []);\n  return mounted;\n}\n\nvar Features$1;\n\n(function (Features) {\n  /** No features enabled for the `useFocusTrap` hook. */\n  Features[Features[\"None\"] = 1] = \"None\";\n  /** Ensure that we move focus initially into the container. */\n\n  Features[Features[\"InitialFocus\"] = 2] = \"InitialFocus\";\n  /** Ensure that pressing `Tab` and `Shift+Tab` is trapped within the container. */\n\n  Features[Features[\"TabLock\"] = 4] = \"TabLock\";\n  /** Ensure that programmatically moving focus outside of the container is disallowed. */\n\n  Features[Features[\"FocusLock\"] = 8] = \"FocusLock\";\n  /** Ensure that we restore the focus when unmounting the component that uses this `useFocusTrap` hook. */\n\n  Features[Features[\"RestoreFocus\"] = 16] = \"RestoreFocus\";\n  /** Enable all features. */\n\n  Features[Features[\"All\"] = 30] = \"All\";\n})(Features$1 || (Features$1 = {}));\n\nfunction useFocusTrap(container, features, _temp) {\n  if (features === void 0) {\n    features = Features$1.All;\n  }\n\n  var _ref = _temp === void 0 ? {} : _temp,\n      initialFocus = _ref.initialFocus,\n      containers = _ref.containers;\n\n  var restoreElement = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(typeof window !== 'undefined' ? document.activeElement : null);\n  var previousActiveElement = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  var mounted = useIsMounted();\n  var featuresRestoreFocus = Boolean(features & Features$1.RestoreFocus);\n  var featuresInitialFocus = Boolean(features & Features$1.InitialFocus); // Capture the currently focused element, before we enable the focus trap.\n\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    if (!featuresRestoreFocus) return;\n    restoreElement.current = document.activeElement;\n  }, [featuresRestoreFocus]); // Restore the focus when we unmount the component.\n\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    if (!featuresRestoreFocus) return;\n    return function () {\n      focusElement(restoreElement.current);\n      restoreElement.current = null;\n    };\n  }, [featuresRestoreFocus]); // Handle initial focus\n\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    if (!featuresInitialFocus) return;\n    if (!container.current) return;\n    var activeElement = document.activeElement;\n\n    if (initialFocus == null ? void 0 : initialFocus.current) {\n      if ((initialFocus == null ? void 0 : initialFocus.current) === activeElement) {\n        previousActiveElement.current = activeElement;\n        return; // Initial focus ref is already the active element\n      }\n    } else if (container.current.contains(activeElement)) {\n      previousActiveElement.current = activeElement;\n      return; // Already focused within Dialog\n    } // Try to focus the initialFocus ref\n\n\n    if (initialFocus == null ? void 0 : initialFocus.current) {\n      focusElement(initialFocus.current);\n    } else {\n      if (focusIn(container.current, Focus.First) === FocusResult.Error) {\n        throw new Error('There are no focusable elements inside the <FocusTrap />');\n      }\n    }\n\n    previousActiveElement.current = document.activeElement;\n  }, [container, initialFocus, featuresInitialFocus]); // Handle `Tab` & `Shift+Tab` keyboard events\n\n  useWindowEvent('keydown', function (event) {\n    if (!(features & Features$1.TabLock)) return;\n    if (!container.current) return;\n    if (event.key !== Keys.Tab) return;\n    event.preventDefault();\n\n    if (focusIn(container.current, (event.shiftKey ? Focus.Previous : Focus.Next) | Focus.WrapAround) === FocusResult.Success) {\n      previousActiveElement.current = document.activeElement;\n    }\n  }); // Prevent programmatically escaping the container\n\n  useWindowEvent('focus', function (event) {\n    if (!(features & Features$1.FocusLock)) return;\n    var allContainers = new Set(containers == null ? void 0 : containers.current);\n    allContainers.add(container);\n    if (!allContainers.size) return;\n    var previous = previousActiveElement.current;\n    if (!previous) return;\n    if (!mounted.current) return;\n    var toElement = event.target;\n\n    if (toElement && toElement instanceof HTMLElement) {\n      if (!contains(allContainers, toElement)) {\n        event.preventDefault();\n        event.stopPropagation();\n        focusElement(previous);\n      } else {\n        previousActiveElement.current = toElement;\n        focusElement(toElement);\n      }\n    } else {\n      focusElement(previousActiveElement.current);\n    }\n  }, true);\n}\n\nfunction contains(containers, element) {\n  for (var _iterator = _createForOfIteratorHelperLoose(containers), _step; !(_step = _iterator()).done;) {\n    var _container$current;\n\n    var container = _step.value;\n    if ((_container$current = container.current) == null ? void 0 : _container$current.contains(element)) return true;\n  }\n\n  return false;\n}\n\nvar interactables = /*#__PURE__*/new Set();\nvar originals = /*#__PURE__*/new Map();\n\nfunction inert(element) {\n  element.setAttribute('aria-hidden', 'true'); // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n\n  element.inert = true;\n}\n\nfunction restore(element) {\n  var original = originals.get(element);\n  if (!original) return;\n  if (original['aria-hidden'] === null) element.removeAttribute('aria-hidden');else element.setAttribute('aria-hidden', original['aria-hidden']); // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n\n  element.inert = original.inert;\n}\n\nfunction useInertOthers(container, enabled) {\n  if (enabled === void 0) {\n    enabled = true;\n  }\n\n  useIsoMorphicEffect(function () {\n    if (!enabled) return;\n    if (!container.current) return;\n    var element = container.current; // Mark myself as an interactable element\n\n    interactables.add(element); // Restore elements that now contain an interactable child\n\n    for (var _iterator = _createForOfIteratorHelperLoose(originals.keys()), _step; !(_step = _iterator()).done;) {\n      var original = _step.value;\n\n      if (original.contains(element)) {\n        restore(original);\n        originals[\"delete\"](original);\n      }\n    } // Collect direct children of the body\n\n\n    document.querySelectorAll('body > *').forEach(function (child) {\n      if (!(child instanceof HTMLElement)) return; // Skip non-HTMLElements\n      // Skip the interactables, and the parents of the interactables\n\n      for (var _iterator2 = _createForOfIteratorHelperLoose(interactables), _step2; !(_step2 = _iterator2()).done;) {\n        var interactable = _step2.value;\n        if (child.contains(interactable)) return;\n      } // Keep track of the elements\n\n\n      if (interactables.size === 1) {\n        originals.set(child, {\n          'aria-hidden': child.getAttribute('aria-hidden'),\n          // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n          inert: child.inert\n        }); // Mutate the element\n\n        inert(child);\n      }\n    });\n    return function () {\n      // Inert is disabled on the current element\n      interactables[\"delete\"](element); // We still have interactable elements, therefore this one and its parent\n      // will become inert as well.\n\n      if (interactables.size > 0) {\n        // Collect direct children of the body\n        document.querySelectorAll('body > *').forEach(function (child) {\n          if (!(child instanceof HTMLElement)) return; // Skip non-HTMLElements\n          // Skip already inert parents\n\n          if (originals.has(child)) return; // Skip the interactables, and the parents of the interactables\n\n          for (var _iterator3 = _createForOfIteratorHelperLoose(interactables), _step3; !(_step3 = _iterator3()).done;) {\n            var interactable = _step3.value;\n            if (child.contains(interactable)) return;\n          }\n\n          originals.set(child, {\n            'aria-hidden': child.getAttribute('aria-hidden'),\n            // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n            inert: child.inert\n          }); // Mutate the element\n\n          inert(child);\n        });\n      } else {\n        for (var _iterator4 = _createForOfIteratorHelperLoose(originals.keys()), _step4; !(_step4 = _iterator4()).done;) {\n          var _element = _step4.value;\n          // Restore\n          restore(_element); // Cleanup\n\n          originals[\"delete\"](_element);\n        }\n      }\n    };\n  }, [enabled]);\n}\n\nvar ForcePortalRootContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(false);\nfunction usePortalRoot() {\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ForcePortalRootContext);\n}\nfunction ForcePortalRoot(props) {\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(ForcePortalRootContext.Provider, {\n    value: props.force\n  }, props.children);\n}\n\nfunction usePortalTarget() {\n  var forceInRoot = usePortalRoot();\n  var groupTarget = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(PortalGroupContext);\n\n  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(function () {\n    // Group context is used, but still null\n    if (!forceInRoot && groupTarget !== null) return null; // No group context is used, let's create a default portal root\n\n    if (typeof window === 'undefined') return null;\n    var existingRoot = document.getElementById('headlessui-portal-root');\n    if (existingRoot) return existingRoot;\n    var root = document.createElement('div');\n    root.setAttribute('id', 'headlessui-portal-root');\n    return document.body.appendChild(root);\n  }),\n      target = _useState[0],\n      setTarget = _useState[1];\n\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    if (forceInRoot) return;\n    if (groupTarget === null) return;\n    setTarget(groupTarget.current);\n  }, [groupTarget, setTarget, forceInRoot]);\n  return target;\n} // ---\n\n\nvar DEFAULT_PORTAL_TAG = react__WEBPACK_IMPORTED_MODULE_0__.Fragment;\nfunction Portal(props) {\n  var passthroughProps = props;\n  var target = usePortalTarget();\n\n  var _useState2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(function () {\n    return typeof window === 'undefined' ? null : document.createElement('div');\n  }),\n      element = _useState2[0];\n\n  var ready = useServerHandoffComplete();\n  useIsoMorphicEffect(function () {\n    if (!target) return;\n    if (!element) return;\n    target.appendChild(element);\n    return function () {\n      if (!target) return;\n      if (!element) return;\n      target.removeChild(element);\n\n      if (target.childNodes.length <= 0) {\n        var _target$parentElement;\n\n        (_target$parentElement = target.parentElement) == null ? void 0 : _target$parentElement.removeChild(target);\n      }\n    };\n  }, [target, element]);\n  if (!ready) return null;\n  return !target || !element ? null : (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(render({\n    props: passthroughProps,\n    defaultTag: DEFAULT_PORTAL_TAG,\n    name: 'Portal'\n  }), element);\n} // ---\n\nvar DEFAULT_GROUP_TAG = react__WEBPACK_IMPORTED_MODULE_0__.Fragment;\nvar PortalGroupContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\n\nfunction Group(props) {\n  var target = props.target,\n      passthroughProps = _objectWithoutPropertiesLoose(props, [\"target\"]);\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(PortalGroupContext.Provider, {\n    value: target\n  }, render({\n    props: passthroughProps,\n    defaultTag: DEFAULT_GROUP_TAG,\n    name: 'Popover.Group'\n  }));\n} // ---\n\n\nPortal.Group = Group;\n\nvar DescriptionContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\n\nfunction useDescriptionContext() {\n  var context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(DescriptionContext);\n\n  if (context === null) {\n    var err = new Error('You used a <Description /> component, but it is not inside a relevant parent.');\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDescriptionContext);\n    throw err;\n  }\n\n  return context;\n}\n\nfunction useDescriptions() {\n  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]),\n      descriptionIds = _useState[0],\n      setDescriptionIds = _useState[1];\n\n  return [// The actual id's as string or undefined\n  descriptionIds.length > 0 ? descriptionIds.join(' ') : undefined, // The provider component\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return function DescriptionProvider(props) {\n      var register = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (value) {\n        setDescriptionIds(function (existing) {\n          return [].concat(existing, [value]);\n        });\n        return function () {\n          return setDescriptionIds(function (existing) {\n            var clone = existing.slice();\n            var idx = clone.indexOf(value);\n            if (idx !== -1) clone.splice(idx, 1);\n            return clone;\n          });\n        };\n      }, []);\n      var contextBag = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n        return {\n          register: register,\n          slot: props.slot,\n          name: props.name,\n          props: props.props\n        };\n      }, [register, props.slot, props.name, props.props]);\n      return react__WEBPACK_IMPORTED_MODULE_0__.createElement(DescriptionContext.Provider, {\n        value: contextBag\n      }, props.children);\n    };\n  }, [setDescriptionIds])];\n} // ---\n\nvar DEFAULT_DESCRIPTION_TAG = 'p';\nfunction Description(props) {\n  var context = useDescriptionContext();\n  var id = \"headlessui-description-\" + useId();\n  useIsoMorphicEffect(function () {\n    return context.register(id);\n  }, [id, context.register]);\n  var passThroughProps = props;\n\n  var propsWeControl = _extends({}, context.props, {\n    id: id\n  });\n\n  return render({\n    props: _extends({}, passThroughProps, propsWeControl),\n    slot: context.slot || {},\n    defaultTag: DEFAULT_DESCRIPTION_TAG,\n    name: context.name || 'Description'\n  });\n}\n\nvar Context = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nContext.displayName = 'OpenClosedContext';\nvar State;\n\n(function (State) {\n  State[State[\"Open\"] = 0] = \"Open\";\n  State[State[\"Closed\"] = 1] = \"Closed\";\n})(State || (State = {}));\n\nfunction useOpenClosed() {\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Context);\n}\nfunction OpenClosedProvider(_ref) {\n  var value = _ref.value,\n      children = _ref.children;\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Context.Provider, {\n    value: value\n  }, children);\n}\n\nvar StackContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(function () {});\nStackContext.displayName = 'StackContext';\nvar StackMessage;\n\n(function (StackMessage) {\n  StackMessage[StackMessage[\"Add\"] = 0] = \"Add\";\n  StackMessage[StackMessage[\"Remove\"] = 1] = \"Remove\";\n})(StackMessage || (StackMessage = {}));\n\nfunction useStackContext() {\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(StackContext);\n}\nfunction StackProvider(_ref) {\n  var children = _ref.children,\n      onUpdate = _ref.onUpdate,\n      type = _ref.type,\n      element = _ref.element;\n  var parentUpdate = useStackContext();\n  var notify = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    // Notify our layer\n    onUpdate == null ? void 0 : onUpdate.apply(void 0, args); // Notify the parent\n\n    parentUpdate.apply(void 0, args);\n  }, [parentUpdate, onUpdate]);\n  useIsoMorphicEffect(function () {\n    notify(StackMessage.Add, type, element);\n    return function () {\n      return notify(StackMessage.Remove, type, element);\n    };\n  }, [notify, type, element]);\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(StackContext.Provider, {\n    value: notify\n  }, children);\n}\n\nvar _reducers;\nvar DialogStates;\n\n(function (DialogStates) {\n  DialogStates[DialogStates[\"Open\"] = 0] = \"Open\";\n  DialogStates[DialogStates[\"Closed\"] = 1] = \"Closed\";\n})(DialogStates || (DialogStates = {}));\n\nvar ActionTypes;\n\n(function (ActionTypes) {\n  ActionTypes[ActionTypes[\"SetTitleId\"] = 0] = \"SetTitleId\";\n})(ActionTypes || (ActionTypes = {}));\n\nvar reducers = (_reducers = {}, _reducers[ActionTypes.SetTitleId] = function (state, action) {\n  if (state.titleId === action.id) return state;\n  return _extends({}, state, {\n    titleId: action.id\n  });\n}, _reducers);\nvar DialogContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nDialogContext.displayName = 'DialogContext';\n\nfunction useDialogContext(component) {\n  var context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(DialogContext);\n\n  if (context === null) {\n    var err = new Error(\"<\" + component + \" /> is missing a parent <\" + Dialog.displayName + \" /> component.\");\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDialogContext);\n    throw err;\n  }\n\n  return context;\n}\n\nfunction stateReducer(state, action) {\n  return match(action.type, reducers, state, action);\n} // ---\n\n\nvar DEFAULT_DIALOG_TAG = 'div';\nvar DialogRenderFeatures = Features.RenderStrategy | Features.Static;\nvar DialogRoot = /*#__PURE__*/forwardRefWithAs(function Dialog(props, ref) {\n  var open = props.open,\n      onClose = props.onClose,\n      initialFocus = props.initialFocus,\n      rest = _objectWithoutPropertiesLoose(props, [\"open\", \"onClose\", \"initialFocus\"]);\n\n  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0),\n      nestedDialogCount = _useState[0],\n      setNestedDialogCount = _useState[1];\n\n  var usesOpenClosedState = useOpenClosed();\n\n  if (open === undefined && usesOpenClosedState !== null) {\n    var _match;\n\n    // Update the `open` prop based on the open closed state\n    open = match(usesOpenClosedState, (_match = {}, _match[State.Open] = true, _match[State.Closed] = false, _match));\n  }\n\n  var containers = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(new Set());\n  var internalDialogRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  var dialogRef = useSyncRefs(internalDialogRef, ref); // Validations\n\n  var hasOpen = props.hasOwnProperty('open') || usesOpenClosedState !== null;\n  var hasOnClose = props.hasOwnProperty('onClose');\n\n  if (!hasOpen && !hasOnClose) {\n    throw new Error(\"You have to provide an `open` and an `onClose` prop to the `Dialog` component.\");\n  }\n\n  if (!hasOpen) {\n    throw new Error(\"You provided an `onClose` prop to the `Dialog`, but forgot an `open` prop.\");\n  }\n\n  if (!hasOnClose) {\n    throw new Error(\"You provided an `open` prop to the `Dialog`, but forgot an `onClose` prop.\");\n  }\n\n  if (typeof open !== 'boolean') {\n    throw new Error(\"You provided an `open` prop to the `Dialog`, but the value is not a boolean. Received: \" + open);\n  }\n\n  if (typeof onClose !== 'function') {\n    throw new Error(\"You provided an `onClose` prop to the `Dialog`, but the value is not a function. Received: \" + onClose);\n  }\n\n  var dialogState = open ? DialogStates.Open : DialogStates.Closed;\n\n  var visible = function () {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open;\n    }\n\n    return dialogState === DialogStates.Open;\n  }();\n\n  var _useReducer = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(stateReducer, {\n    titleId: null,\n    descriptionId: null\n  }),\n      state = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  var close = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {\n    return onClose(false);\n  }, [onClose]);\n  var setTitleId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (id) {\n    return dispatch({\n      type: ActionTypes.SetTitleId,\n      id: id\n    });\n  }, [dispatch]);\n  var ready = useServerHandoffComplete();\n  var enabled = ready && dialogState === DialogStates.Open;\n  var hasNestedDialogs = nestedDialogCount > 1; // 1 is the current dialog\n\n  var hasParentDialog = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(DialogContext) !== null; // If there are multiple dialogs, then you can be the root, the leaf or one\n  // in between. We only care abou whether you are the top most one or not.\n\n  var position = !hasNestedDialogs ? 'leaf' : 'parent';\n  useFocusTrap(internalDialogRef, enabled ? match(position, {\n    parent: Features$1.RestoreFocus,\n    leaf: Features$1.All\n  }) : Features$1.None, {\n    initialFocus: initialFocus,\n    containers: containers\n  });\n  useInertOthers(internalDialogRef, hasNestedDialogs ? enabled : false); // Handle outside click\n\n  useWindowEvent('mousedown', function (event) {\n    var _internalDialogRef$cu;\n\n    var target = event.target;\n    if (dialogState !== DialogStates.Open) return;\n    if (hasNestedDialogs) return;\n    if ((_internalDialogRef$cu = internalDialogRef.current) == null ? void 0 : _internalDialogRef$cu.contains(target)) return;\n    close();\n  }); // Scroll lock\n\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    if (dialogState !== DialogStates.Open) return;\n    if (hasParentDialog) return;\n    var overflow = document.documentElement.style.overflow;\n    var paddingRight = document.documentElement.style.paddingRight;\n    var scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;\n    document.documentElement.style.overflow = 'hidden';\n    document.documentElement.style.paddingRight = scrollbarWidth + \"px\";\n    return function () {\n      document.documentElement.style.overflow = overflow;\n      document.documentElement.style.paddingRight = paddingRight;\n    };\n  }, [dialogState, hasParentDialog]); // Trigger close when the FocusTrap gets hidden\n\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    if (dialogState !== DialogStates.Open) return;\n    if (!internalDialogRef.current) return;\n    var observer = new IntersectionObserver(function (entries) {\n      for (var _iterator = _createForOfIteratorHelperLoose(entries), _step; !(_step = _iterator()).done;) {\n        var entry = _step.value;\n\n        if (entry.boundingClientRect.x === 0 && entry.boundingClientRect.y === 0 && entry.boundingClientRect.width === 0 && entry.boundingClientRect.height === 0) {\n          close();\n        }\n      }\n    });\n    observer.observe(internalDialogRef.current);\n    return function () {\n      return observer.disconnect();\n    };\n  }, [dialogState, internalDialogRef, close]);\n\n  var _useDescriptions = useDescriptions(),\n      describedby = _useDescriptions[0],\n      DescriptionProvider = _useDescriptions[1];\n\n  var id = \"headlessui-dialog-\" + useId();\n  var contextBag = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return [{\n      dialogState: dialogState,\n      close: close,\n      setTitleId: setTitleId\n    }, state];\n  }, [dialogState, state, close, setTitleId]);\n  var slot = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return {\n      open: dialogState === DialogStates.Open\n    };\n  }, [dialogState]);\n  var propsWeControl = {\n    ref: dialogRef,\n    id: id,\n    role: 'dialog',\n    'aria-modal': dialogState === DialogStates.Open ? true : undefined,\n    'aria-labelledby': state.titleId,\n    'aria-describedby': describedby,\n    onClick: function onClick(event) {\n      event.stopPropagation();\n    },\n    // Handle `Escape` to close\n    onKeyDown: function onKeyDown(event) {\n      if (event.key !== Keys.Escape) return;\n      if (dialogState !== DialogStates.Open) return;\n      if (hasNestedDialogs) return;\n      event.preventDefault();\n      event.stopPropagation();\n      close();\n    }\n  };\n  var passthroughProps = rest;\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(StackProvider, {\n    type: \"Dialog\",\n    element: internalDialogRef,\n    onUpdate: (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (message, type, element) {\n      var _match2;\n\n      if (type !== 'Dialog') return;\n      match(message, (_match2 = {}, _match2[StackMessage.Add] = function () {\n        containers.current.add(element);\n        setNestedDialogCount(function (count) {\n          return count + 1;\n        });\n      }, _match2[StackMessage.Remove] = function () {\n        containers.current.add(element);\n        setNestedDialogCount(function (count) {\n          return count - 1;\n        });\n      }, _match2));\n    }, [])\n  }, react__WEBPACK_IMPORTED_MODULE_0__.createElement(ForcePortalRoot, {\n    force: true\n  }, react__WEBPACK_IMPORTED_MODULE_0__.createElement(Portal, null, react__WEBPACK_IMPORTED_MODULE_0__.createElement(DialogContext.Provider, {\n    value: contextBag\n  }, react__WEBPACK_IMPORTED_MODULE_0__.createElement(Portal.Group, {\n    target: internalDialogRef\n  }, react__WEBPACK_IMPORTED_MODULE_0__.createElement(ForcePortalRoot, {\n    force: false\n  }, react__WEBPACK_IMPORTED_MODULE_0__.createElement(DescriptionProvider, {\n    slot: slot,\n    name: \"Dialog.Description\"\n  }, render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_DIALOG_TAG,\n    features: DialogRenderFeatures,\n    visible: visible,\n    name: 'Dialog'\n  }))))))));\n}); // ---\n\nvar DEFAULT_OVERLAY_TAG = 'div';\nvar Overlay = /*#__PURE__*/forwardRefWithAs(function Overlay(props, ref) {\n  var _useDialogContext = useDialogContext([Dialog.displayName, Overlay.name].join('.')),\n      _useDialogContext$ = _useDialogContext[0],\n      dialogState = _useDialogContext$.dialogState,\n      close = _useDialogContext$.close;\n\n  var overlayRef = useSyncRefs(ref);\n  var id = \"headlessui-dialog-overlay-\" + useId();\n  var handleClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (event) {\n    if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault();\n    event.preventDefault();\n    event.stopPropagation();\n    close();\n  }, [close]);\n  var slot = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return {\n      open: dialogState === DialogStates.Open\n    };\n  }, [dialogState]);\n  var propsWeControl = {\n    ref: overlayRef,\n    id: id,\n    'aria-hidden': true,\n    onClick: handleClick\n  };\n  var passthroughProps = props;\n  return render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_OVERLAY_TAG,\n    name: 'Dialog.Overlay'\n  });\n}); // ---\n\nvar DEFAULT_TITLE_TAG = 'h2';\n\nfunction Title(props) {\n  var _useDialogContext2 = useDialogContext([Dialog.displayName, Title.name].join('.')),\n      _useDialogContext2$ = _useDialogContext2[0],\n      dialogState = _useDialogContext2$.dialogState,\n      setTitleId = _useDialogContext2$.setTitleId;\n\n  var id = \"headlessui-dialog-title-\" + useId();\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    setTitleId(id);\n    return function () {\n      return setTitleId(null);\n    };\n  }, [id, setTitleId]);\n  var slot = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return {\n      open: dialogState === DialogStates.Open\n    };\n  }, [dialogState]);\n  var propsWeControl = {\n    id: id\n  };\n  var passthroughProps = props;\n  return render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_TITLE_TAG,\n    name: 'Dialog.Title'\n  });\n} // ---\n\n\nvar Dialog = /*#__PURE__*/Object.assign(DialogRoot, {\n  Overlay: Overlay,\n  Title: Title,\n  Description: Description\n});\n\nvar _reducers$1;\nvar DisclosureStates;\n\n(function (DisclosureStates) {\n  DisclosureStates[DisclosureStates[\"Open\"] = 0] = \"Open\";\n  DisclosureStates[DisclosureStates[\"Closed\"] = 1] = \"Closed\";\n})(DisclosureStates || (DisclosureStates = {}));\n\nvar ActionTypes$1;\n\n(function (ActionTypes) {\n  ActionTypes[ActionTypes[\"ToggleDisclosure\"] = 0] = \"ToggleDisclosure\";\n  ActionTypes[ActionTypes[\"SetButtonId\"] = 1] = \"SetButtonId\";\n  ActionTypes[ActionTypes[\"SetPanelId\"] = 2] = \"SetPanelId\";\n  ActionTypes[ActionTypes[\"LinkPanel\"] = 3] = \"LinkPanel\";\n  ActionTypes[ActionTypes[\"UnlinkPanel\"] = 4] = \"UnlinkPanel\";\n})(ActionTypes$1 || (ActionTypes$1 = {}));\n\nvar reducers$1 = (_reducers$1 = {}, _reducers$1[ActionTypes$1.ToggleDisclosure] = function (state) {\n  var _match;\n\n  return _extends({}, state, {\n    disclosureState: match(state.disclosureState, (_match = {}, _match[DisclosureStates.Open] = DisclosureStates.Closed, _match[DisclosureStates.Closed] = DisclosureStates.Open, _match))\n  });\n}, _reducers$1[ActionTypes$1.LinkPanel] = function (state) {\n  if (state.linkedPanel === true) return state;\n  return _extends({}, state, {\n    linkedPanel: true\n  });\n}, _reducers$1[ActionTypes$1.UnlinkPanel] = function (state) {\n  if (state.linkedPanel === false) return state;\n  return _extends({}, state, {\n    linkedPanel: false\n  });\n}, _reducers$1[ActionTypes$1.SetButtonId] = function (state, action) {\n  if (state.buttonId === action.buttonId) return state;\n  return _extends({}, state, {\n    buttonId: action.buttonId\n  });\n}, _reducers$1[ActionTypes$1.SetPanelId] = function (state, action) {\n  if (state.panelId === action.panelId) return state;\n  return _extends({}, state, {\n    panelId: action.panelId\n  });\n}, _reducers$1);\nvar DisclosureContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nDisclosureContext.displayName = 'DisclosureContext';\n\nfunction useDisclosureContext(component) {\n  var context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(DisclosureContext);\n\n  if (context === null) {\n    var err = new Error(\"<\" + component + \" /> is missing a parent <\" + Disclosure.name + \" /> component.\");\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDisclosureContext);\n    throw err;\n  }\n\n  return context;\n}\n\nfunction stateReducer$1(state, action) {\n  return match(action.type, reducers$1, state, action);\n} // ---\n\n\nvar DEFAULT_DISCLOSURE_TAG = react__WEBPACK_IMPORTED_MODULE_0__.Fragment;\nfunction Disclosure(props) {\n  var _match2;\n\n  var _props$defaultOpen = props.defaultOpen,\n      defaultOpen = _props$defaultOpen === void 0 ? false : _props$defaultOpen,\n      passthroughProps = _objectWithoutPropertiesLoose(props, [\"defaultOpen\"]);\n\n  var buttonId = \"headlessui-disclosure-button-\" + useId();\n  var panelId = \"headlessui-disclosure-panel-\" + useId();\n  var reducerBag = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(stateReducer$1, {\n    disclosureState: defaultOpen ? DisclosureStates.Open : DisclosureStates.Closed,\n    linkedPanel: false,\n    buttonId: buttonId,\n    panelId: panelId\n  });\n  var disclosureState = reducerBag[0].disclosureState,\n      dispatch = reducerBag[1];\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    return dispatch({\n      type: ActionTypes$1.SetButtonId,\n      buttonId: buttonId\n    });\n  }, [buttonId, dispatch]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    return dispatch({\n      type: ActionTypes$1.SetPanelId,\n      panelId: panelId\n    });\n  }, [panelId, dispatch]);\n  var slot = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return {\n      open: disclosureState === DisclosureStates.Open\n    };\n  }, [disclosureState]);\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(DisclosureContext.Provider, {\n    value: reducerBag\n  }, react__WEBPACK_IMPORTED_MODULE_0__.createElement(OpenClosedProvider, {\n    value: match(disclosureState, (_match2 = {}, _match2[DisclosureStates.Open] = State.Open, _match2[DisclosureStates.Closed] = State.Closed, _match2))\n  }, render({\n    props: passthroughProps,\n    slot: slot,\n    defaultTag: DEFAULT_DISCLOSURE_TAG,\n    name: 'Disclosure'\n  })));\n} // ---\n\nvar DEFAULT_BUTTON_TAG = 'button';\nvar Button = /*#__PURE__*/forwardRefWithAs(function Button(props, ref) {\n  var _useDisclosureContext = useDisclosureContext([Disclosure.name, Button.name].join('.')),\n      state = _useDisclosureContext[0],\n      dispatch = _useDisclosureContext[1];\n\n  var buttonRef = useSyncRefs(ref);\n  var handleKeyDown = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (event) {\n    switch (event.key) {\n      case Keys.Space:\n      case Keys.Enter:\n        event.preventDefault();\n        event.stopPropagation();\n        dispatch({\n          type: ActionTypes$1.ToggleDisclosure\n        });\n        break;\n    }\n  }, [dispatch]);\n  var handleKeyUp = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (event) {\n    switch (event.key) {\n      case Keys.Space:\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault();\n        break;\n    }\n  }, []);\n  var handleClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (event) {\n    if (isDisabledReactIssue7711(event.currentTarget)) return;\n    if (props.disabled) return;\n    dispatch({\n      type: ActionTypes$1.ToggleDisclosure\n    });\n  }, [dispatch, props.disabled]);\n  var slot = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return {\n      open: state.disclosureState === DisclosureStates.Open\n    };\n  }, [state]);\n  var passthroughProps = props;\n  var propsWeControl = {\n    ref: buttonRef,\n    id: state.buttonId,\n    type: 'button',\n    'aria-expanded': state.disclosureState === DisclosureStates.Open ? true : undefined,\n    'aria-controls': state.linkedPanel ? state.panelId : undefined,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    onClick: handleClick\n  };\n  return render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_BUTTON_TAG,\n    name: 'Disclosure.Button'\n  });\n}); // ---\n\nvar DEFAULT_PANEL_TAG = 'div';\nvar PanelRenderFeatures = Features.RenderStrategy | Features.Static;\nvar Panel = /*#__PURE__*/forwardRefWithAs(function Panel(props, ref) {\n  var _useDisclosureContext2 = useDisclosureContext([Disclosure.name, Panel.name].join('.')),\n      state = _useDisclosureContext2[0],\n      dispatch = _useDisclosureContext2[1];\n\n  var panelRef = useSyncRefs(ref, function () {\n    if (state.linkedPanel) return;\n    dispatch({\n      type: ActionTypes$1.LinkPanel\n    });\n  });\n  var usesOpenClosedState = useOpenClosed();\n\n  var visible = function () {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open;\n    }\n\n    return state.disclosureState === DisclosureStates.Open;\n  }(); // Unlink on \"unmount\" myself\n\n\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    return function () {\n      return dispatch({\n        type: ActionTypes$1.UnlinkPanel\n      });\n    };\n  }, [dispatch]); // Unlink on \"unmount\" children\n\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    var _props$unmount;\n\n    if (state.disclosureState === DisclosureStates.Closed && ((_props$unmount = props.unmount) != null ? _props$unmount : true)) {\n      dispatch({\n        type: ActionTypes$1.UnlinkPanel\n      });\n    }\n  }, [state.disclosureState, props.unmount, dispatch]);\n  var slot = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return {\n      open: state.disclosureState === DisclosureStates.Open\n    };\n  }, [state]);\n  var propsWeControl = {\n    ref: panelRef,\n    id: state.panelId\n  };\n  var passthroughProps = props;\n  return render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_PANEL_TAG,\n    features: PanelRenderFeatures,\n    visible: visible,\n    name: 'Disclosure.Panel'\n  });\n}); // ---\n\nDisclosure.Button = Button;\nDisclosure.Panel = Panel;\n\nvar DEFAULT_FOCUS_TRAP_TAG = 'div';\nfunction FocusTrap(props) {\n  var container = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n\n  var initialFocus = props.initialFocus,\n      passthroughProps = _objectWithoutPropertiesLoose(props, [\"initialFocus\"]);\n\n  var ready = useServerHandoffComplete();\n  useFocusTrap(container, ready ? Features$1.All : Features$1.None, {\n    initialFocus: initialFocus\n  });\n  var propsWeControl = {\n    ref: container\n  };\n  return render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    defaultTag: DEFAULT_FOCUS_TRAP_TAG,\n    name: 'FocusTrap'\n  });\n}\n\nfunction disposables() {\n  var disposables = [];\n  var api = {\n    requestAnimationFrame: function (_requestAnimationFrame) {\n      function requestAnimationFrame() {\n        return _requestAnimationFrame.apply(this, arguments);\n      }\n\n      requestAnimationFrame.toString = function () {\n        return _requestAnimationFrame.toString();\n      };\n\n      return requestAnimationFrame;\n    }(function () {\n      var raf = requestAnimationFrame.apply(void 0, arguments);\n      api.add(function () {\n        return cancelAnimationFrame(raf);\n      });\n    }),\n    nextFrame: function nextFrame() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      api.requestAnimationFrame(function () {\n        api.requestAnimationFrame.apply(api, args);\n      });\n    },\n    setTimeout: function (_setTimeout) {\n      function setTimeout() {\n        return _setTimeout.apply(this, arguments);\n      }\n\n      setTimeout.toString = function () {\n        return _setTimeout.toString();\n      };\n\n      return setTimeout;\n    }(function () {\n      var timer = setTimeout.apply(void 0, arguments);\n      api.add(function () {\n        return clearTimeout(timer);\n      });\n    }),\n    add: function add(cb) {\n      disposables.push(cb);\n    },\n    dispose: function dispose() {\n      for (var _iterator = _createForOfIteratorHelperLoose(disposables.splice(0)), _step; !(_step = _iterator()).done;) {\n        var dispose = _step.value;\n        dispose();\n      }\n    }\n  };\n  return api;\n}\n\nfunction useDisposables() {\n  // Using useState instead of useRef so that we can use the initializer function.\n  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(disposables),\n      d = _useState[0];\n\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    return function () {\n      return d.dispose();\n    };\n  }, [d]);\n  return d;\n}\n\nfunction useComputed(cb, dependencies) {\n  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(cb),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var cbRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(cb);\n  useIsoMorphicEffect(function () {\n    cbRef.current = cb;\n  }, [cb]);\n  useIsoMorphicEffect(function () {\n    return setValue(cbRef.current);\n  }, [cbRef, setValue].concat(dependencies));\n  return value;\n}\n\nfunction assertNever(x) {\n  throw new Error('Unexpected object: ' + x);\n}\n\nvar Focus$1;\n\n(function (Focus) {\n  /** Focus the first non-disabled item. */\n  Focus[Focus[\"First\"] = 0] = \"First\";\n  /** Focus the previous non-disabled item. */\n\n  Focus[Focus[\"Previous\"] = 1] = \"Previous\";\n  /** Focus the next non-disabled item. */\n\n  Focus[Focus[\"Next\"] = 2] = \"Next\";\n  /** Focus the last non-disabled item. */\n\n  Focus[Focus[\"Last\"] = 3] = \"Last\";\n  /** Focus a specific item based on the `id` of the item. */\n\n  Focus[Focus[\"Specific\"] = 4] = \"Specific\";\n  /** Focus no items at all. */\n\n  Focus[Focus[\"Nothing\"] = 5] = \"Nothing\";\n})(Focus$1 || (Focus$1 = {}));\n\nfunction calculateActiveIndex(action, resolvers) {\n  var items = resolvers.resolveItems();\n  if (items.length <= 0) return null;\n  var currentActiveIndex = resolvers.resolveActiveIndex();\n  var activeIndex = currentActiveIndex != null ? currentActiveIndex : -1;\n\n  var nextActiveIndex = function () {\n    switch (action.focus) {\n      case Focus$1.First:\n        return items.findIndex(function (item) {\n          return !resolvers.resolveDisabled(item);\n        });\n\n      case Focus$1.Previous:\n        {\n          var idx = items.slice().reverse().findIndex(function (item, idx, all) {\n            if (activeIndex !== -1 && all.length - idx - 1 >= activeIndex) return false;\n            return !resolvers.resolveDisabled(item);\n          });\n          if (idx === -1) return idx;\n          return items.length - 1 - idx;\n        }\n\n      case Focus$1.Next:\n        return items.findIndex(function (item, idx) {\n          if (idx <= activeIndex) return false;\n          return !resolvers.resolveDisabled(item);\n        });\n\n      case Focus$1.Last:\n        {\n          var _idx = items.slice().reverse().findIndex(function (item) {\n            return !resolvers.resolveDisabled(item);\n          });\n\n          if (_idx === -1) return _idx;\n          return items.length - 1 - _idx;\n        }\n\n      case Focus$1.Specific:\n        return items.findIndex(function (item) {\n          return resolvers.resolveId(item) === action.id;\n        });\n\n      case Focus$1.Nothing:\n        return null;\n\n      default:\n        assertNever(action);\n    }\n  }();\n\n  return nextActiveIndex === -1 ? currentActiveIndex : nextActiveIndex;\n}\n\nvar _reducers$2;\nvar ListboxStates;\n\n(function (ListboxStates) {\n  ListboxStates[ListboxStates[\"Open\"] = 0] = \"Open\";\n  ListboxStates[ListboxStates[\"Closed\"] = 1] = \"Closed\";\n})(ListboxStates || (ListboxStates = {}));\n\nvar ActionTypes$2;\n\n(function (ActionTypes) {\n  ActionTypes[ActionTypes[\"OpenListbox\"] = 0] = \"OpenListbox\";\n  ActionTypes[ActionTypes[\"CloseListbox\"] = 1] = \"CloseListbox\";\n  ActionTypes[ActionTypes[\"SetDisabled\"] = 2] = \"SetDisabled\";\n  ActionTypes[ActionTypes[\"GoToOption\"] = 3] = \"GoToOption\";\n  ActionTypes[ActionTypes[\"Search\"] = 4] = \"Search\";\n  ActionTypes[ActionTypes[\"ClearSearch\"] = 5] = \"ClearSearch\";\n  ActionTypes[ActionTypes[\"RegisterOption\"] = 6] = \"RegisterOption\";\n  ActionTypes[ActionTypes[\"UnregisterOption\"] = 7] = \"UnregisterOption\";\n})(ActionTypes$2 || (ActionTypes$2 = {}));\n\nvar reducers$2 = (_reducers$2 = {}, _reducers$2[ActionTypes$2.CloseListbox] = function (state) {\n  if (state.disabled) return state;\n  if (state.listboxState === ListboxStates.Closed) return state;\n  return _extends({}, state, {\n    activeOptionIndex: null,\n    listboxState: ListboxStates.Closed\n  });\n}, _reducers$2[ActionTypes$2.OpenListbox] = function (state) {\n  if (state.disabled) return state;\n  if (state.listboxState === ListboxStates.Open) return state;\n  return _extends({}, state, {\n    listboxState: ListboxStates.Open\n  });\n}, _reducers$2[ActionTypes$2.SetDisabled] = function (state, action) {\n  if (state.disabled === action.disabled) return state;\n  return _extends({}, state, {\n    disabled: action.disabled\n  });\n}, _reducers$2[ActionTypes$2.GoToOption] = function (state, action) {\n  if (state.disabled) return state;\n  if (state.listboxState === ListboxStates.Closed) return state;\n  var activeOptionIndex = calculateActiveIndex(action, {\n    resolveItems: function resolveItems() {\n      return state.options;\n    },\n    resolveActiveIndex: function resolveActiveIndex() {\n      return state.activeOptionIndex;\n    },\n    resolveId: function resolveId(item) {\n      return item.id;\n    },\n    resolveDisabled: function resolveDisabled(item) {\n      return item.dataRef.current.disabled;\n    }\n  });\n  if (state.searchQuery === '' && state.activeOptionIndex === activeOptionIndex) return state;\n  return _extends({}, state, {\n    searchQuery: '',\n    activeOptionIndex: activeOptionIndex\n  });\n}, _reducers$2[ActionTypes$2.Search] = function (state, action) {\n  if (state.disabled) return state;\n  if (state.listboxState === ListboxStates.Closed) return state;\n  var searchQuery = state.searchQuery + action.value.toLowerCase();\n  var match = state.options.findIndex(function (option) {\n    var _option$dataRef$curre;\n\n    return !option.dataRef.current.disabled && ((_option$dataRef$curre = option.dataRef.current.textValue) == null ? void 0 : _option$dataRef$curre.startsWith(searchQuery));\n  });\n  if (match === -1 || match === state.activeOptionIndex) return _extends({}, state, {\n    searchQuery: searchQuery\n  });\n  return _extends({}, state, {\n    searchQuery: searchQuery,\n    activeOptionIndex: match\n  });\n}, _reducers$2[ActionTypes$2.ClearSearch] = function (state) {\n  if (state.disabled) return state;\n  if (state.listboxState === ListboxStates.Closed) return state;\n  if (state.searchQuery === '') return state;\n  return _extends({}, state, {\n    searchQuery: ''\n  });\n}, _reducers$2[ActionTypes$2.RegisterOption] = function (state, action) {\n  return _extends({}, state, {\n    options: [].concat(state.options, [{\n      id: action.id,\n      dataRef: action.dataRef\n    }])\n  });\n}, _reducers$2[ActionTypes$2.UnregisterOption] = function (state, action) {\n  var nextOptions = state.options.slice();\n  var currentActiveOption = state.activeOptionIndex !== null ? nextOptions[state.activeOptionIndex] : null;\n  var idx = nextOptions.findIndex(function (a) {\n    return a.id === action.id;\n  });\n  if (idx !== -1) nextOptions.splice(idx, 1);\n  return _extends({}, state, {\n    options: nextOptions,\n    activeOptionIndex: function () {\n      if (idx === state.activeOptionIndex) return null;\n      if (currentActiveOption === null) return null; // If we removed the option before the actual active index, then it would be out of sync. To\n      // fix this, we will find the correct (new) index position.\n\n      return nextOptions.indexOf(currentActiveOption);\n    }()\n  });\n}, _reducers$2);\nvar ListboxContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nListboxContext.displayName = 'ListboxContext';\n\nfunction useListboxContext(component) {\n  var context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ListboxContext);\n\n  if (context === null) {\n    var err = new Error(\"<\" + component + \" /> is missing a parent <\" + Listbox.name + \" /> component.\");\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useListboxContext);\n    throw err;\n  }\n\n  return context;\n}\n\nfunction stateReducer$2(state, action) {\n  return match(action.type, reducers$2, state, action);\n} // ---\n\n\nvar DEFAULT_LISTBOX_TAG = react__WEBPACK_IMPORTED_MODULE_0__.Fragment;\nfunction Listbox(props) {\n  var _match;\n\n  var value = props.value,\n      onChange = props.onChange,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      passThroughProps = _objectWithoutPropertiesLoose(props, [\"value\", \"onChange\", \"disabled\"]);\n\n  var reducerBag = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(stateReducer$2, {\n    listboxState: ListboxStates.Closed,\n    propsRef: {\n      current: {\n        value: value,\n        onChange: onChange\n      }\n    },\n    labelRef: (0,react__WEBPACK_IMPORTED_MODULE_0__.createRef)(),\n    buttonRef: (0,react__WEBPACK_IMPORTED_MODULE_0__.createRef)(),\n    optionsRef: (0,react__WEBPACK_IMPORTED_MODULE_0__.createRef)(),\n    disabled: disabled,\n    options: [],\n    searchQuery: '',\n    activeOptionIndex: null\n  });\n  var _reducerBag$ = reducerBag[0],\n      listboxState = _reducerBag$.listboxState,\n      propsRef = _reducerBag$.propsRef,\n      optionsRef = _reducerBag$.optionsRef,\n      buttonRef = _reducerBag$.buttonRef,\n      dispatch = reducerBag[1];\n  useIsoMorphicEffect(function () {\n    propsRef.current.value = value;\n  }, [value, propsRef]);\n  useIsoMorphicEffect(function () {\n    propsRef.current.onChange = onChange;\n  }, [onChange, propsRef]);\n  useIsoMorphicEffect(function () {\n    return dispatch({\n      type: ActionTypes$2.SetDisabled,\n      disabled: disabled\n    });\n  }, [disabled]); // Handle outside click\n\n  useWindowEvent('mousedown', function (event) {\n    var _buttonRef$current, _optionsRef$current;\n\n    var target = event.target;\n    if (listboxState !== ListboxStates.Open) return;\n    if ((_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.contains(target)) return;\n    if ((_optionsRef$current = optionsRef.current) == null ? void 0 : _optionsRef$current.contains(target)) return;\n    dispatch({\n      type: ActionTypes$2.CloseListbox\n    });\n\n    if (!isFocusableElement(target, FocusableMode.Loose)) {\n      var _buttonRef$current2;\n\n      event.preventDefault();\n      (_buttonRef$current2 = buttonRef.current) == null ? void 0 : _buttonRef$current2.focus();\n    }\n  });\n  var slot = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return {\n      open: listboxState === ListboxStates.Open,\n      disabled: disabled\n    };\n  }, [listboxState, disabled]);\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(ListboxContext.Provider, {\n    value: reducerBag\n  }, react__WEBPACK_IMPORTED_MODULE_0__.createElement(OpenClosedProvider, {\n    value: match(listboxState, (_match = {}, _match[ListboxStates.Open] = State.Open, _match[ListboxStates.Closed] = State.Closed, _match))\n  }, render({\n    props: passThroughProps,\n    slot: slot,\n    defaultTag: DEFAULT_LISTBOX_TAG,\n    name: 'Listbox'\n  })));\n} // ---\n\nvar DEFAULT_BUTTON_TAG$1 = 'button';\nvar Button$1 = /*#__PURE__*/forwardRefWithAs(function Button(props, ref) {\n  var _state$optionsRef$cur;\n\n  var _useListboxContext = useListboxContext([Listbox.name, Button.name].join('.')),\n      state = _useListboxContext[0],\n      dispatch = _useListboxContext[1];\n\n  var buttonRef = useSyncRefs(state.buttonRef, ref);\n  var id = \"headlessui-listbox-button-\" + useId();\n  var d = useDisposables();\n  var handleKeyDown = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (event) {\n    switch (event.key) {\n      // Ref: https://www.w3.org/TR/wai-aria-practices-1.2/#keyboard-interaction-13\n      case Keys.Space:\n      case Keys.Enter:\n      case Keys.ArrowDown:\n        event.preventDefault();\n        dispatch({\n          type: ActionTypes$2.OpenListbox\n        });\n        d.nextFrame(function () {\n          if (!state.propsRef.current.value) dispatch({\n            type: ActionTypes$2.GoToOption,\n            focus: Focus$1.First\n          });\n        });\n        break;\n\n      case Keys.ArrowUp:\n        event.preventDefault();\n        dispatch({\n          type: ActionTypes$2.OpenListbox\n        });\n        d.nextFrame(function () {\n          if (!state.propsRef.current.value) dispatch({\n            type: ActionTypes$2.GoToOption,\n            focus: Focus$1.Last\n          });\n        });\n        break;\n    }\n  }, [dispatch, state, d]);\n  var handleKeyUp = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (event) {\n    switch (event.key) {\n      case Keys.Space:\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault();\n        break;\n    }\n  }, []);\n  var handleClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (event) {\n    if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault();\n\n    if (state.listboxState === ListboxStates.Open) {\n      dispatch({\n        type: ActionTypes$2.CloseListbox\n      });\n      d.nextFrame(function () {\n        var _state$buttonRef$curr;\n\n        return (_state$buttonRef$curr = state.buttonRef.current) == null ? void 0 : _state$buttonRef$curr.focus({\n          preventScroll: true\n        });\n      });\n    } else {\n      event.preventDefault();\n      dispatch({\n        type: ActionTypes$2.OpenListbox\n      });\n    }\n  }, [dispatch, d, state]);\n  var labelledby = useComputed(function () {\n    if (!state.labelRef.current) return undefined;\n    return [state.labelRef.current.id, id].join(' ');\n  }, [state.labelRef.current, id]);\n  var slot = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return {\n      open: state.listboxState === ListboxStates.Open,\n      disabled: state.disabled\n    };\n  }, [state]);\n  var passthroughProps = props;\n  var propsWeControl = {\n    ref: buttonRef,\n    id: id,\n    type: 'button',\n    'aria-haspopup': true,\n    'aria-controls': (_state$optionsRef$cur = state.optionsRef.current) == null ? void 0 : _state$optionsRef$cur.id,\n    'aria-expanded': state.listboxState === ListboxStates.Open ? true : undefined,\n    'aria-labelledby': labelledby,\n    disabled: state.disabled,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    onClick: handleClick\n  };\n  return render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_BUTTON_TAG$1,\n    name: 'Listbox.Button'\n  });\n}); // ---\n\nvar DEFAULT_LABEL_TAG = 'label';\n\nfunction Label(props) {\n  var _useListboxContext2 = useListboxContext([Listbox.name, Label.name].join('.')),\n      state = _useListboxContext2[0];\n\n  var id = \"headlessui-listbox-label-\" + useId();\n  var handleClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {\n    var _state$buttonRef$curr2;\n\n    return (_state$buttonRef$curr2 = state.buttonRef.current) == null ? void 0 : _state$buttonRef$curr2.focus({\n      preventScroll: true\n    });\n  }, [state.buttonRef]);\n  var slot = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return {\n      open: state.listboxState === ListboxStates.Open,\n      disabled: state.disabled\n    };\n  }, [state]);\n  var propsWeControl = {\n    ref: state.labelRef,\n    id: id,\n    onClick: handleClick\n  };\n  return render({\n    props: _extends({}, props, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_LABEL_TAG,\n    name: 'Listbox.Label'\n  });\n} // ---\n\n\nvar DEFAULT_OPTIONS_TAG = 'ul';\nvar OptionsRenderFeatures = Features.RenderStrategy | Features.Static;\nvar Options = /*#__PURE__*/forwardRefWithAs(function Options(props, ref) {\n  var _state$options$state$;\n\n  var _useListboxContext3 = useListboxContext([Listbox.name, Options.name].join('.')),\n      state = _useListboxContext3[0],\n      dispatch = _useListboxContext3[1];\n\n  var optionsRef = useSyncRefs(state.optionsRef, ref);\n  var id = \"headlessui-listbox-options-\" + useId();\n  var d = useDisposables();\n  var searchDisposables = useDisposables();\n  var usesOpenClosedState = useOpenClosed();\n\n  var visible = function () {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open;\n    }\n\n    return state.listboxState === ListboxStates.Open;\n  }();\n\n  useIsoMorphicEffect(function () {\n    var container = state.optionsRef.current;\n    if (!container) return;\n    if (state.listboxState !== ListboxStates.Open) return;\n    if (container === document.activeElement) return;\n    container.focus({\n      preventScroll: true\n    });\n  }, [state.listboxState, state.optionsRef]);\n  var handleKeyDown = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (event) {\n    searchDisposables.dispose();\n\n    switch (event.key) {\n      // Ref: https://www.w3.org/TR/wai-aria-practices-1.2/#keyboard-interaction-12\n      // @ts-expect-error Fallthrough is expected here\n      case Keys.Space:\n        if (state.searchQuery !== '') {\n          event.preventDefault();\n          event.stopPropagation();\n          return dispatch({\n            type: ActionTypes$2.Search,\n            value: event.key\n          });\n        }\n\n      // When in type ahead mode, fallthrough\n\n      case Keys.Enter:\n        event.preventDefault();\n        event.stopPropagation();\n        dispatch({\n          type: ActionTypes$2.CloseListbox\n        });\n\n        if (state.activeOptionIndex !== null) {\n          var dataRef = state.options[state.activeOptionIndex].dataRef;\n          state.propsRef.current.onChange(dataRef.current.value);\n        }\n\n        disposables().nextFrame(function () {\n          var _state$buttonRef$curr3;\n\n          return (_state$buttonRef$curr3 = state.buttonRef.current) == null ? void 0 : _state$buttonRef$curr3.focus({\n            preventScroll: true\n          });\n        });\n        break;\n\n      case Keys.ArrowDown:\n        event.preventDefault();\n        event.stopPropagation();\n        return dispatch({\n          type: ActionTypes$2.GoToOption,\n          focus: Focus$1.Next\n        });\n\n      case Keys.ArrowUp:\n        event.preventDefault();\n        event.stopPropagation();\n        return dispatch({\n          type: ActionTypes$2.GoToOption,\n          focus: Focus$1.Previous\n        });\n\n      case Keys.Home:\n      case Keys.PageUp:\n        event.preventDefault();\n        event.stopPropagation();\n        return dispatch({\n          type: ActionTypes$2.GoToOption,\n          focus: Focus$1.First\n        });\n\n      case Keys.End:\n      case Keys.PageDown:\n        event.preventDefault();\n        event.stopPropagation();\n        return dispatch({\n          type: ActionTypes$2.GoToOption,\n          focus: Focus$1.Last\n        });\n\n      case Keys.Escape:\n        event.preventDefault();\n        event.stopPropagation();\n        dispatch({\n          type: ActionTypes$2.CloseListbox\n        });\n        return d.nextFrame(function () {\n          var _state$buttonRef$curr4;\n\n          return (_state$buttonRef$curr4 = state.buttonRef.current) == null ? void 0 : _state$buttonRef$curr4.focus({\n            preventScroll: true\n          });\n        });\n\n      case Keys.Tab:\n        event.preventDefault();\n        event.stopPropagation();\n        break;\n\n      default:\n        if (event.key.length === 1) {\n          dispatch({\n            type: ActionTypes$2.Search,\n            value: event.key\n          });\n          searchDisposables.setTimeout(function () {\n            return dispatch({\n              type: ActionTypes$2.ClearSearch\n            });\n          }, 350);\n        }\n\n        break;\n    }\n  }, [d, dispatch, searchDisposables, state]);\n  var labelledby = useComputed(function () {\n    var _state$labelRef$curre, _state$labelRef$curre2, _state$buttonRef$curr5;\n\n    return (_state$labelRef$curre = (_state$labelRef$curre2 = state.labelRef.current) == null ? void 0 : _state$labelRef$curre2.id) != null ? _state$labelRef$curre : (_state$buttonRef$curr5 = state.buttonRef.current) == null ? void 0 : _state$buttonRef$curr5.id;\n  }, [state.labelRef.current, state.buttonRef.current]);\n  var slot = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return {\n      open: state.listboxState === ListboxStates.Open\n    };\n  }, [state]);\n  var propsWeControl = {\n    'aria-activedescendant': state.activeOptionIndex === null ? undefined : (_state$options$state$ = state.options[state.activeOptionIndex]) == null ? void 0 : _state$options$state$.id,\n    'aria-labelledby': labelledby,\n    id: id,\n    onKeyDown: handleKeyDown,\n    role: 'listbox',\n    tabIndex: 0,\n    ref: optionsRef\n  };\n  var passthroughProps = props;\n  return render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_OPTIONS_TAG,\n    features: OptionsRenderFeatures,\n    visible: visible,\n    name: 'Listbox.Options'\n  });\n}); // ---\n\nvar DEFAULT_OPTION_TAG = 'li';\n\nfunction Option(props) {\n  var _props$disabled2 = props.disabled,\n      disabled = _props$disabled2 === void 0 ? false : _props$disabled2,\n      value = props.value,\n      passthroughProps = _objectWithoutPropertiesLoose(props, [\"disabled\", \"value\"]);\n\n  var _useListboxContext4 = useListboxContext([Listbox.name, Option.name].join('.')),\n      state = _useListboxContext4[0],\n      dispatch = _useListboxContext4[1];\n\n  var id = \"headlessui-listbox-option-\" + useId();\n  var active = state.activeOptionIndex !== null ? state.options[state.activeOptionIndex].id === id : false;\n  var selected = state.propsRef.current.value === value;\n  var bag = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n    disabled: disabled,\n    value: value\n  });\n  useIsoMorphicEffect(function () {\n    bag.current.disabled = disabled;\n  }, [bag, disabled]);\n  useIsoMorphicEffect(function () {\n    bag.current.value = value;\n  }, [bag, value]);\n  useIsoMorphicEffect(function () {\n    var _document$getElementB, _document$getElementB2;\n\n    bag.current.textValue = (_document$getElementB = document.getElementById(id)) == null ? void 0 : (_document$getElementB2 = _document$getElementB.textContent) == null ? void 0 : _document$getElementB2.toLowerCase();\n  }, [bag, id]);\n  var select = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {\n    return state.propsRef.current.onChange(value);\n  }, [state.propsRef, value]);\n  useIsoMorphicEffect(function () {\n    dispatch({\n      type: ActionTypes$2.RegisterOption,\n      id: id,\n      dataRef: bag\n    });\n    return function () {\n      return dispatch({\n        type: ActionTypes$2.UnregisterOption,\n        id: id\n      });\n    };\n  }, [bag, id]);\n  useIsoMorphicEffect(function () {\n    var _document$getElementB3;\n\n    if (state.listboxState !== ListboxStates.Open) return;\n    if (!selected) return;\n    dispatch({\n      type: ActionTypes$2.GoToOption,\n      focus: Focus$1.Specific,\n      id: id\n    });\n    (_document$getElementB3 = document.getElementById(id)) == null ? void 0 : _document$getElementB3.focus == null ? void 0 : _document$getElementB3.focus();\n  }, [state.listboxState]);\n  useIsoMorphicEffect(function () {\n    if (state.listboxState !== ListboxStates.Open) return;\n    if (!active) return;\n    var d = disposables();\n    d.nextFrame(function () {\n      var _document$getElementB4;\n\n      return (_document$getElementB4 = document.getElementById(id)) == null ? void 0 : _document$getElementB4.scrollIntoView == null ? void 0 : _document$getElementB4.scrollIntoView({\n        block: 'nearest'\n      });\n    });\n    return d.dispose;\n  }, [id, active, state.listboxState]);\n  var handleClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (event) {\n    if (disabled) return event.preventDefault();\n    select();\n    dispatch({\n      type: ActionTypes$2.CloseListbox\n    });\n    disposables().nextFrame(function () {\n      var _state$buttonRef$curr6;\n\n      return (_state$buttonRef$curr6 = state.buttonRef.current) == null ? void 0 : _state$buttonRef$curr6.focus({\n        preventScroll: true\n      });\n    });\n  }, [dispatch, state.buttonRef, disabled, select]);\n  var handleFocus = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {\n    if (disabled) return dispatch({\n      type: ActionTypes$2.GoToOption,\n      focus: Focus$1.Nothing\n    });\n    dispatch({\n      type: ActionTypes$2.GoToOption,\n      focus: Focus$1.Specific,\n      id: id\n    });\n  }, [disabled, id, dispatch]);\n  var handleMove = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {\n    if (disabled) return;\n    if (active) return;\n    dispatch({\n      type: ActionTypes$2.GoToOption,\n      focus: Focus$1.Specific,\n      id: id\n    });\n  }, [disabled, active, id, dispatch]);\n  var handleLeave = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {\n    if (disabled) return;\n    if (!active) return;\n    dispatch({\n      type: ActionTypes$2.GoToOption,\n      focus: Focus$1.Nothing\n    });\n  }, [disabled, active, dispatch]);\n  var slot = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return {\n      active: active,\n      selected: selected,\n      disabled: disabled\n    };\n  }, [active, selected, disabled]);\n  var propsWeControl = {\n    id: id,\n    role: 'option',\n    tabIndex: -1,\n    'aria-disabled': disabled === true ? true : undefined,\n    'aria-selected': selected === true ? true : undefined,\n    onClick: handleClick,\n    onFocus: handleFocus,\n    onPointerMove: handleMove,\n    onMouseMove: handleMove,\n    onPointerLeave: handleLeave,\n    onMouseLeave: handleLeave\n  };\n  return render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_OPTION_TAG,\n    name: 'Listbox.Option'\n  });\n} // ---\n\n\nListbox.Button = Button$1;\nListbox.Label = Label;\nListbox.Options = Options;\nListbox.Option = Option;\n\nfunction useTreeWalker(_ref) {\n  var container = _ref.container,\n      accept = _ref.accept,\n      walk = _ref.walk,\n      _ref$enabled = _ref.enabled,\n      enabled = _ref$enabled === void 0 ? true : _ref$enabled;\n  var acceptRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(accept);\n  var walkRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(walk);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    acceptRef.current = accept;\n    walkRef.current = walk;\n  }, [accept, walk]);\n  useIsoMorphicEffect(function () {\n    if (!container) return;\n    if (!enabled) return;\n    var accept = acceptRef.current;\n    var walk = walkRef.current;\n    var acceptNode = Object.assign(function (node) {\n      return accept(node);\n    }, {\n      acceptNode: accept\n    });\n    var walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, acceptNode, false);\n\n    while (walker.nextNode()) {\n      walk(walker.currentNode);\n    }\n  }, [container, enabled, acceptRef, walkRef]);\n}\n\nvar _reducers$3;\nvar MenuStates;\n\n(function (MenuStates) {\n  MenuStates[MenuStates[\"Open\"] = 0] = \"Open\";\n  MenuStates[MenuStates[\"Closed\"] = 1] = \"Closed\";\n})(MenuStates || (MenuStates = {}));\n\nvar ActionTypes$3;\n\n(function (ActionTypes) {\n  ActionTypes[ActionTypes[\"OpenMenu\"] = 0] = \"OpenMenu\";\n  ActionTypes[ActionTypes[\"CloseMenu\"] = 1] = \"CloseMenu\";\n  ActionTypes[ActionTypes[\"GoToItem\"] = 2] = \"GoToItem\";\n  ActionTypes[ActionTypes[\"Search\"] = 3] = \"Search\";\n  ActionTypes[ActionTypes[\"ClearSearch\"] = 4] = \"ClearSearch\";\n  ActionTypes[ActionTypes[\"RegisterItem\"] = 5] = \"RegisterItem\";\n  ActionTypes[ActionTypes[\"UnregisterItem\"] = 6] = \"UnregisterItem\";\n})(ActionTypes$3 || (ActionTypes$3 = {}));\n\nvar reducers$3 = (_reducers$3 = {}, _reducers$3[ActionTypes$3.CloseMenu] = function (state) {\n  if (state.menuState === MenuStates.Closed) return state;\n  return _extends({}, state, {\n    activeItemIndex: null,\n    menuState: MenuStates.Closed\n  });\n}, _reducers$3[ActionTypes$3.OpenMenu] = function (state) {\n  if (state.menuState === MenuStates.Open) return state;\n  return _extends({}, state, {\n    menuState: MenuStates.Open\n  });\n}, _reducers$3[ActionTypes$3.GoToItem] = function (state, action) {\n  var activeItemIndex = calculateActiveIndex(action, {\n    resolveItems: function resolveItems() {\n      return state.items;\n    },\n    resolveActiveIndex: function resolveActiveIndex() {\n      return state.activeItemIndex;\n    },\n    resolveId: function resolveId(item) {\n      return item.id;\n    },\n    resolveDisabled: function resolveDisabled(item) {\n      return item.dataRef.current.disabled;\n    }\n  });\n  if (state.searchQuery === '' && state.activeItemIndex === activeItemIndex) return state;\n  return _extends({}, state, {\n    searchQuery: '',\n    activeItemIndex: activeItemIndex\n  });\n}, _reducers$3[ActionTypes$3.Search] = function (state, action) {\n  var searchQuery = state.searchQuery + action.value.toLowerCase();\n  var match = state.items.findIndex(function (item) {\n    var _item$dataRef$current;\n\n    return ((_item$dataRef$current = item.dataRef.current.textValue) == null ? void 0 : _item$dataRef$current.startsWith(searchQuery)) && !item.dataRef.current.disabled;\n  });\n  if (match === -1 || match === state.activeItemIndex) return _extends({}, state, {\n    searchQuery: searchQuery\n  });\n  return _extends({}, state, {\n    searchQuery: searchQuery,\n    activeItemIndex: match\n  });\n}, _reducers$3[ActionTypes$3.ClearSearch] = function (state) {\n  if (state.searchQuery === '') return state;\n  return _extends({}, state, {\n    searchQuery: ''\n  });\n}, _reducers$3[ActionTypes$3.RegisterItem] = function (state, action) {\n  return _extends({}, state, {\n    items: [].concat(state.items, [{\n      id: action.id,\n      dataRef: action.dataRef\n    }])\n  });\n}, _reducers$3[ActionTypes$3.UnregisterItem] = function (state, action) {\n  var nextItems = state.items.slice();\n  var currentActiveItem = state.activeItemIndex !== null ? nextItems[state.activeItemIndex] : null;\n  var idx = nextItems.findIndex(function (a) {\n    return a.id === action.id;\n  });\n  if (idx !== -1) nextItems.splice(idx, 1);\n  return _extends({}, state, {\n    items: nextItems,\n    activeItemIndex: function () {\n      if (idx === state.activeItemIndex) return null;\n      if (currentActiveItem === null) return null; // If we removed the item before the actual active index, then it would be out of sync. To\n      // fix this, we will find the correct (new) index position.\n\n      return nextItems.indexOf(currentActiveItem);\n    }()\n  });\n}, _reducers$3);\nvar MenuContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nMenuContext.displayName = 'MenuContext';\n\nfunction useMenuContext(component) {\n  var context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(MenuContext);\n\n  if (context === null) {\n    var err = new Error(\"<\" + component + \" /> is missing a parent <\" + Menu.name + \" /> component.\");\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useMenuContext);\n    throw err;\n  }\n\n  return context;\n}\n\nfunction stateReducer$3(state, action) {\n  return match(action.type, reducers$3, state, action);\n} // ---\n\n\nvar DEFAULT_MENU_TAG = react__WEBPACK_IMPORTED_MODULE_0__.Fragment;\nfunction Menu(props) {\n  var _match;\n\n  var reducerBag = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(stateReducer$3, {\n    menuState: MenuStates.Closed,\n    buttonRef: (0,react__WEBPACK_IMPORTED_MODULE_0__.createRef)(),\n    itemsRef: (0,react__WEBPACK_IMPORTED_MODULE_0__.createRef)(),\n    items: [],\n    searchQuery: '',\n    activeItemIndex: null\n  });\n  var _reducerBag$ = reducerBag[0],\n      menuState = _reducerBag$.menuState,\n      itemsRef = _reducerBag$.itemsRef,\n      buttonRef = _reducerBag$.buttonRef,\n      dispatch = reducerBag[1]; // Handle outside click\n\n  useWindowEvent('mousedown', function (event) {\n    var _buttonRef$current, _itemsRef$current;\n\n    var target = event.target;\n    if (menuState !== MenuStates.Open) return;\n    if ((_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.contains(target)) return;\n    if ((_itemsRef$current = itemsRef.current) == null ? void 0 : _itemsRef$current.contains(target)) return;\n    dispatch({\n      type: ActionTypes$3.CloseMenu\n    });\n\n    if (!isFocusableElement(target, FocusableMode.Loose)) {\n      var _buttonRef$current2;\n\n      event.preventDefault();\n      (_buttonRef$current2 = buttonRef.current) == null ? void 0 : _buttonRef$current2.focus();\n    }\n  });\n  var slot = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return {\n      open: menuState === MenuStates.Open\n    };\n  }, [menuState]);\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(MenuContext.Provider, {\n    value: reducerBag\n  }, react__WEBPACK_IMPORTED_MODULE_0__.createElement(OpenClosedProvider, {\n    value: match(menuState, (_match = {}, _match[MenuStates.Open] = State.Open, _match[MenuStates.Closed] = State.Closed, _match))\n  }, render({\n    props: props,\n    slot: slot,\n    defaultTag: DEFAULT_MENU_TAG,\n    name: 'Menu'\n  })));\n} // ---\n\nvar DEFAULT_BUTTON_TAG$2 = 'button';\nvar Button$2 = /*#__PURE__*/forwardRefWithAs(function Button(props, ref) {\n  var _state$itemsRef$curre;\n\n  var _useMenuContext = useMenuContext([Menu.name, Button.name].join('.')),\n      state = _useMenuContext[0],\n      dispatch = _useMenuContext[1];\n\n  var buttonRef = useSyncRefs(state.buttonRef, ref);\n  var id = \"headlessui-menu-button-\" + useId();\n  var d = useDisposables();\n  var handleKeyDown = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (event) {\n    switch (event.key) {\n      // Ref: https://www.w3.org/TR/wai-aria-practices-1.2/#keyboard-interaction-13\n      case Keys.Space:\n      case Keys.Enter:\n      case Keys.ArrowDown:\n        event.preventDefault();\n        event.stopPropagation();\n        dispatch({\n          type: ActionTypes$3.OpenMenu\n        });\n        d.nextFrame(function () {\n          return dispatch({\n            type: ActionTypes$3.GoToItem,\n            focus: Focus$1.First\n          });\n        });\n        break;\n\n      case Keys.ArrowUp:\n        event.preventDefault();\n        event.stopPropagation();\n        dispatch({\n          type: ActionTypes$3.OpenMenu\n        });\n        d.nextFrame(function () {\n          return dispatch({\n            type: ActionTypes$3.GoToItem,\n            focus: Focus$1.Last\n          });\n        });\n        break;\n    }\n  }, [dispatch, d]);\n  var handleKeyUp = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (event) {\n    switch (event.key) {\n      case Keys.Space:\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault();\n        break;\n    }\n  }, []);\n  var handleClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (event) {\n    if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault();\n    if (props.disabled) return;\n\n    if (state.menuState === MenuStates.Open) {\n      dispatch({\n        type: ActionTypes$3.CloseMenu\n      });\n      d.nextFrame(function () {\n        var _state$buttonRef$curr;\n\n        return (_state$buttonRef$curr = state.buttonRef.current) == null ? void 0 : _state$buttonRef$curr.focus({\n          preventScroll: true\n        });\n      });\n    } else {\n      event.preventDefault();\n      event.stopPropagation();\n      dispatch({\n        type: ActionTypes$3.OpenMenu\n      });\n    }\n  }, [dispatch, d, state, props.disabled]);\n  var slot = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return {\n      open: state.menuState === MenuStates.Open\n    };\n  }, [state]);\n  var passthroughProps = props;\n  var propsWeControl = {\n    ref: buttonRef,\n    id: id,\n    type: 'button',\n    'aria-haspopup': true,\n    'aria-controls': (_state$itemsRef$curre = state.itemsRef.current) == null ? void 0 : _state$itemsRef$curre.id,\n    'aria-expanded': state.menuState === MenuStates.Open ? true : undefined,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    onClick: handleClick\n  };\n  return render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_BUTTON_TAG$2,\n    name: 'Menu.Button'\n  });\n}); // ---\n\nvar DEFAULT_ITEMS_TAG = 'div';\nvar ItemsRenderFeatures = Features.RenderStrategy | Features.Static;\nvar Items = /*#__PURE__*/forwardRefWithAs(function Items(props, ref) {\n  var _state$items$state$ac, _state$buttonRef$curr4;\n\n  var _useMenuContext2 = useMenuContext([Menu.name, Items.name].join('.')),\n      state = _useMenuContext2[0],\n      dispatch = _useMenuContext2[1];\n\n  var itemsRef = useSyncRefs(state.itemsRef, ref);\n  var id = \"headlessui-menu-items-\" + useId();\n  var searchDisposables = useDisposables();\n  var usesOpenClosedState = useOpenClosed();\n\n  var visible = function () {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open;\n    }\n\n    return state.menuState === MenuStates.Open;\n  }();\n\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    var container = state.itemsRef.current;\n    if (!container) return;\n    if (state.menuState !== MenuStates.Open) return;\n    if (container === document.activeElement) return;\n    container.focus({\n      preventScroll: true\n    });\n  }, [state.menuState, state.itemsRef]);\n  useTreeWalker({\n    container: state.itemsRef.current,\n    enabled: state.menuState === MenuStates.Open,\n    accept: function accept(node) {\n      if (node.getAttribute('role') === 'menuitem') return NodeFilter.FILTER_REJECT;\n      if (node.hasAttribute('role')) return NodeFilter.FILTER_SKIP;\n      return NodeFilter.FILTER_ACCEPT;\n    },\n    walk: function walk(node) {\n      node.setAttribute('role', 'none');\n    }\n  });\n  var handleKeyDown = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (event) {\n    searchDisposables.dispose();\n\n    switch (event.key) {\n      // Ref: https://www.w3.org/TR/wai-aria-practices-1.2/#keyboard-interaction-12\n      // @ts-expect-error Fallthrough is expected here\n      case Keys.Space:\n        if (state.searchQuery !== '') {\n          event.preventDefault();\n          event.stopPropagation();\n          return dispatch({\n            type: ActionTypes$3.Search,\n            value: event.key\n          });\n        }\n\n      // When in type ahead mode, fallthrough\n\n      case Keys.Enter:\n        event.preventDefault();\n        event.stopPropagation();\n        dispatch({\n          type: ActionTypes$3.CloseMenu\n        });\n\n        if (state.activeItemIndex !== null) {\n          var _document$getElementB;\n\n          var _id = state.items[state.activeItemIndex].id;\n          (_document$getElementB = document.getElementById(_id)) == null ? void 0 : _document$getElementB.click();\n        }\n\n        disposables().nextFrame(function () {\n          var _state$buttonRef$curr2;\n\n          return (_state$buttonRef$curr2 = state.buttonRef.current) == null ? void 0 : _state$buttonRef$curr2.focus({\n            preventScroll: true\n          });\n        });\n        break;\n\n      case Keys.ArrowDown:\n        event.preventDefault();\n        event.stopPropagation();\n        return dispatch({\n          type: ActionTypes$3.GoToItem,\n          focus: Focus$1.Next\n        });\n\n      case Keys.ArrowUp:\n        event.preventDefault();\n        event.stopPropagation();\n        return dispatch({\n          type: ActionTypes$3.GoToItem,\n          focus: Focus$1.Previous\n        });\n\n      case Keys.Home:\n      case Keys.PageUp:\n        event.preventDefault();\n        event.stopPropagation();\n        return dispatch({\n          type: ActionTypes$3.GoToItem,\n          focus: Focus$1.First\n        });\n\n      case Keys.End:\n      case Keys.PageDown:\n        event.preventDefault();\n        event.stopPropagation();\n        return dispatch({\n          type: ActionTypes$3.GoToItem,\n          focus: Focus$1.Last\n        });\n\n      case Keys.Escape:\n        event.preventDefault();\n        event.stopPropagation();\n        dispatch({\n          type: ActionTypes$3.CloseMenu\n        });\n        disposables().nextFrame(function () {\n          var _state$buttonRef$curr3;\n\n          return (_state$buttonRef$curr3 = state.buttonRef.current) == null ? void 0 : _state$buttonRef$curr3.focus({\n            preventScroll: true\n          });\n        });\n        break;\n\n      case Keys.Tab:\n        event.preventDefault();\n        event.stopPropagation();\n        break;\n\n      default:\n        if (event.key.length === 1) {\n          dispatch({\n            type: ActionTypes$3.Search,\n            value: event.key\n          });\n          searchDisposables.setTimeout(function () {\n            return dispatch({\n              type: ActionTypes$3.ClearSearch\n            });\n          }, 350);\n        }\n\n        break;\n    }\n  }, [dispatch, searchDisposables, state]);\n  var handleKeyUp = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (event) {\n    switch (event.key) {\n      case Keys.Space:\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault();\n        break;\n    }\n  }, []);\n  var slot = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return {\n      open: state.menuState === MenuStates.Open\n    };\n  }, [state]);\n  var propsWeControl = {\n    'aria-activedescendant': state.activeItemIndex === null ? undefined : (_state$items$state$ac = state.items[state.activeItemIndex]) == null ? void 0 : _state$items$state$ac.id,\n    'aria-labelledby': (_state$buttonRef$curr4 = state.buttonRef.current) == null ? void 0 : _state$buttonRef$curr4.id,\n    id: id,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    role: 'menu',\n    tabIndex: 0,\n    ref: itemsRef\n  };\n  var passthroughProps = props;\n  return render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_ITEMS_TAG,\n    features: ItemsRenderFeatures,\n    visible: visible,\n    name: 'Menu.Items'\n  });\n}); // ---\n\nvar DEFAULT_ITEM_TAG = react__WEBPACK_IMPORTED_MODULE_0__.Fragment;\n\nfunction Item(props) {\n  var _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      onClick = props.onClick,\n      passthroughProps = _objectWithoutPropertiesLoose(props, [\"disabled\", \"onClick\"]);\n\n  var _useMenuContext3 = useMenuContext([Menu.name, Item.name].join('.')),\n      state = _useMenuContext3[0],\n      dispatch = _useMenuContext3[1];\n\n  var id = \"headlessui-menu-item-\" + useId();\n  var active = state.activeItemIndex !== null ? state.items[state.activeItemIndex].id === id : false;\n  useIsoMorphicEffect(function () {\n    if (state.menuState !== MenuStates.Open) return;\n    if (!active) return;\n    var d = disposables();\n    d.nextFrame(function () {\n      var _document$getElementB2;\n\n      return (_document$getElementB2 = document.getElementById(id)) == null ? void 0 : _document$getElementB2.scrollIntoView == null ? void 0 : _document$getElementB2.scrollIntoView({\n        block: 'nearest'\n      });\n    });\n    return d.dispose;\n  }, [id, active, state.menuState]);\n  var bag = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n    disabled: disabled\n  });\n  useIsoMorphicEffect(function () {\n    bag.current.disabled = disabled;\n  }, [bag, disabled]);\n  useIsoMorphicEffect(function () {\n    var _document$getElementB3, _document$getElementB4;\n\n    bag.current.textValue = (_document$getElementB3 = document.getElementById(id)) == null ? void 0 : (_document$getElementB4 = _document$getElementB3.textContent) == null ? void 0 : _document$getElementB4.toLowerCase();\n  }, [bag, id]);\n  useIsoMorphicEffect(function () {\n    dispatch({\n      type: ActionTypes$3.RegisterItem,\n      id: id,\n      dataRef: bag\n    });\n    return function () {\n      return dispatch({\n        type: ActionTypes$3.UnregisterItem,\n        id: id\n      });\n    };\n  }, [bag, id]);\n  var handleClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (event) {\n    if (disabled) return event.preventDefault();\n    dispatch({\n      type: ActionTypes$3.CloseMenu\n    });\n    disposables().nextFrame(function () {\n      var _state$buttonRef$curr5;\n\n      return (_state$buttonRef$curr5 = state.buttonRef.current) == null ? void 0 : _state$buttonRef$curr5.focus({\n        preventScroll: true\n      });\n    });\n    if (onClick) return onClick(event);\n  }, [dispatch, state.buttonRef, disabled, onClick]);\n  var handleFocus = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {\n    if (disabled) return dispatch({\n      type: ActionTypes$3.GoToItem,\n      focus: Focus$1.Nothing\n    });\n    dispatch({\n      type: ActionTypes$3.GoToItem,\n      focus: Focus$1.Specific,\n      id: id\n    });\n  }, [disabled, id, dispatch]);\n  var handleMove = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {\n    if (disabled) return;\n    if (active) return;\n    dispatch({\n      type: ActionTypes$3.GoToItem,\n      focus: Focus$1.Specific,\n      id: id\n    });\n  }, [disabled, active, id, dispatch]);\n  var handleLeave = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {\n    if (disabled) return;\n    if (!active) return;\n    dispatch({\n      type: ActionTypes$3.GoToItem,\n      focus: Focus$1.Nothing\n    });\n  }, [disabled, active, dispatch]);\n  var slot = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return {\n      active: active,\n      disabled: disabled\n    };\n  }, [active, disabled]);\n  var propsWeControl = {\n    id: id,\n    role: 'menuitem',\n    tabIndex: -1,\n    'aria-disabled': disabled === true ? true : undefined,\n    onClick: handleClick,\n    onFocus: handleFocus,\n    onPointerMove: handleMove,\n    onMouseMove: handleMove,\n    onPointerLeave: handleLeave,\n    onMouseLeave: handleLeave\n  };\n  return render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_ITEM_TAG,\n    name: 'Menu.Item'\n  });\n} // ---\n\n\nMenu.Button = Button$2;\nMenu.Items = Items;\nMenu.Item = Item;\n\nvar _reducers$4;\nvar PopoverStates;\n\n(function (PopoverStates) {\n  PopoverStates[PopoverStates[\"Open\"] = 0] = \"Open\";\n  PopoverStates[PopoverStates[\"Closed\"] = 1] = \"Closed\";\n})(PopoverStates || (PopoverStates = {}));\n\nvar ActionTypes$4;\n\n(function (ActionTypes) {\n  ActionTypes[ActionTypes[\"TogglePopover\"] = 0] = \"TogglePopover\";\n  ActionTypes[ActionTypes[\"ClosePopover\"] = 1] = \"ClosePopover\";\n  ActionTypes[ActionTypes[\"SetButton\"] = 2] = \"SetButton\";\n  ActionTypes[ActionTypes[\"SetButtonId\"] = 3] = \"SetButtonId\";\n  ActionTypes[ActionTypes[\"SetPanel\"] = 4] = \"SetPanel\";\n  ActionTypes[ActionTypes[\"SetPanelId\"] = 5] = \"SetPanelId\";\n})(ActionTypes$4 || (ActionTypes$4 = {}));\n\nvar reducers$4 = (_reducers$4 = {}, _reducers$4[ActionTypes$4.TogglePopover] = function (state) {\n  var _match;\n\n  return _extends({}, state, {\n    popoverState: match(state.popoverState, (_match = {}, _match[PopoverStates.Open] = PopoverStates.Closed, _match[PopoverStates.Closed] = PopoverStates.Open, _match))\n  });\n}, _reducers$4[ActionTypes$4.ClosePopover] = function (state) {\n  if (state.popoverState === PopoverStates.Closed) return state;\n  return _extends({}, state, {\n    popoverState: PopoverStates.Closed\n  });\n}, _reducers$4[ActionTypes$4.SetButton] = function (state, action) {\n  if (state.button === action.button) return state;\n  return _extends({}, state, {\n    button: action.button\n  });\n}, _reducers$4[ActionTypes$4.SetButtonId] = function (state, action) {\n  if (state.buttonId === action.buttonId) return state;\n  return _extends({}, state, {\n    buttonId: action.buttonId\n  });\n}, _reducers$4[ActionTypes$4.SetPanel] = function (state, action) {\n  if (state.panel === action.panel) return state;\n  return _extends({}, state, {\n    panel: action.panel\n  });\n}, _reducers$4[ActionTypes$4.SetPanelId] = function (state, action) {\n  if (state.panelId === action.panelId) return state;\n  return _extends({}, state, {\n    panelId: action.panelId\n  });\n}, _reducers$4);\nvar PopoverContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nPopoverContext.displayName = 'PopoverContext';\n\nfunction usePopoverContext(component) {\n  var context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(PopoverContext);\n\n  if (context === null) {\n    var err = new Error(\"<\" + component + \" /> is missing a parent <\" + Popover.name + \" /> component.\");\n    if (Error.captureStackTrace) Error.captureStackTrace(err, usePopoverContext);\n    throw err;\n  }\n\n  return context;\n}\n\nvar PopoverGroupContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nPopoverGroupContext.displayName = 'PopoverGroupContext';\n\nfunction usePopoverGroupContext() {\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(PopoverGroupContext);\n}\n\nvar PopoverPanelContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nPopoverPanelContext.displayName = 'PopoverPanelContext';\n\nfunction usePopoverPanelContext() {\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(PopoverPanelContext);\n}\n\nfunction stateReducer$4(state, action) {\n  return match(action.type, reducers$4, state, action);\n} // ---\n\n\nvar DEFAULT_POPOVER_TAG = 'div';\nfunction Popover(props) {\n  var _match2;\n\n  var buttonId = \"headlessui-popover-button-\" + useId();\n  var panelId = \"headlessui-popover-panel-\" + useId();\n  var reducerBag = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(stateReducer$4, {\n    popoverState: PopoverStates.Closed,\n    button: null,\n    buttonId: buttonId,\n    panel: null,\n    panelId: panelId\n  });\n  var _reducerBag$ = reducerBag[0],\n      popoverState = _reducerBag$.popoverState,\n      button = _reducerBag$.button,\n      panel = _reducerBag$.panel,\n      dispatch = reducerBag[1];\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    return dispatch({\n      type: ActionTypes$4.SetButtonId,\n      buttonId: buttonId\n    });\n  }, [buttonId, dispatch]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    return dispatch({\n      type: ActionTypes$4.SetPanelId,\n      panelId: panelId\n    });\n  }, [panelId, dispatch]);\n  var registerBag = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return {\n      buttonId: buttonId,\n      panelId: panelId,\n      close: function close() {\n        return dispatch({\n          type: ActionTypes$4.ClosePopover\n        });\n      }\n    };\n  }, [buttonId, panelId, dispatch]);\n  var groupContext = usePopoverGroupContext();\n  var registerPopover = groupContext == null ? void 0 : groupContext.registerPopover;\n  var isFocusWithinPopoverGroup = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {\n    var _groupContext$isFocus;\n\n    return (_groupContext$isFocus = groupContext == null ? void 0 : groupContext.isFocusWithinPopoverGroup()) != null ? _groupContext$isFocus : (button == null ? void 0 : button.contains(document.activeElement)) || (panel == null ? void 0 : panel.contains(document.activeElement));\n  }, [groupContext, button, panel]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    return registerPopover == null ? void 0 : registerPopover(registerBag);\n  }, [registerPopover, registerBag]); // Handle focus out\n\n  useWindowEvent('focus', function () {\n    if (popoverState !== PopoverStates.Open) return;\n    if (isFocusWithinPopoverGroup()) return;\n    if (!button) return;\n    if (!panel) return;\n    dispatch({\n      type: ActionTypes$4.ClosePopover\n    });\n  }, true); // Handle outside click\n\n  useWindowEvent('mousedown', function (event) {\n    var target = event.target;\n    if (popoverState !== PopoverStates.Open) return;\n    if (button == null ? void 0 : button.contains(target)) return;\n    if (panel == null ? void 0 : panel.contains(target)) return;\n    dispatch({\n      type: ActionTypes$4.ClosePopover\n    });\n\n    if (!isFocusableElement(target, FocusableMode.Loose)) {\n      event.preventDefault();\n      button == null ? void 0 : button.focus();\n    }\n  });\n  var slot = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return {\n      open: popoverState === PopoverStates.Open\n    };\n  }, [popoverState]);\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(PopoverContext.Provider, {\n    value: reducerBag\n  }, react__WEBPACK_IMPORTED_MODULE_0__.createElement(OpenClosedProvider, {\n    value: match(popoverState, (_match2 = {}, _match2[PopoverStates.Open] = State.Open, _match2[PopoverStates.Closed] = State.Closed, _match2))\n  }, render({\n    props: props,\n    slot: slot,\n    defaultTag: DEFAULT_POPOVER_TAG,\n    name: 'Popover'\n  })));\n} // ---\n\nvar DEFAULT_BUTTON_TAG$3 = 'button';\nvar Button$3 = /*#__PURE__*/forwardRefWithAs(function Button(props, ref) {\n  var _usePopoverContext = usePopoverContext([Popover.name, Button.name].join('.')),\n      state = _usePopoverContext[0],\n      dispatch = _usePopoverContext[1];\n\n  var internalButtonRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  var groupContext = usePopoverGroupContext();\n  var closeOthers = groupContext == null ? void 0 : groupContext.closeOthers;\n  var panelContext = usePopoverPanelContext();\n  var isWithinPanel = panelContext === null ? false : panelContext === state.panelId;\n  var buttonRef = useSyncRefs(internalButtonRef, ref, isWithinPanel ? null : function (button) {\n    return dispatch({\n      type: ActionTypes$4.SetButton,\n      button: button\n    });\n  }); // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n\n  var activeElementRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  var previousActiveElementRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(typeof window === 'undefined' ? null : document.activeElement);\n  useWindowEvent('focus', function () {\n    previousActiveElementRef.current = activeElementRef.current;\n    activeElementRef.current = document.activeElement;\n  }, true);\n  var handleKeyDown = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (event) {\n    var _state$button;\n\n    if (isWithinPanel) {\n      if (state.popoverState === PopoverStates.Closed) return;\n\n      switch (event.key) {\n        case Keys.Space:\n        case Keys.Enter:\n          event.preventDefault(); // Prevent triggering a *click* event\n\n          event.stopPropagation();\n          dispatch({\n            type: ActionTypes$4.ClosePopover\n          });\n          (_state$button = state.button) == null ? void 0 : _state$button.focus(); // Re-focus the original opening Button\n\n          break;\n      }\n    } else {\n      switch (event.key) {\n        case Keys.Space:\n        case Keys.Enter:\n          event.preventDefault(); // Prevent triggering a *click* event\n\n          event.stopPropagation();\n          if (state.popoverState === PopoverStates.Closed) closeOthers == null ? void 0 : closeOthers(state.buttonId);\n          dispatch({\n            type: ActionTypes$4.TogglePopover\n          });\n          break;\n\n        case Keys.Escape:\n          if (state.popoverState !== PopoverStates.Open) return closeOthers == null ? void 0 : closeOthers(state.buttonId);\n          if (!internalButtonRef.current) return;\n          if (!internalButtonRef.current.contains(document.activeElement)) return;\n          dispatch({\n            type: ActionTypes$4.ClosePopover\n          });\n          break;\n\n        case Keys.Tab:\n          if (state.popoverState !== PopoverStates.Open) return;\n          if (!state.panel) return;\n          if (!state.button) return; // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n\n          if (event.shiftKey) {\n            var _state$button2;\n\n            // Check if the last focused element exists, and check that it is not inside button or panel itself\n            if (!previousActiveElementRef.current) return;\n            if ((_state$button2 = state.button) == null ? void 0 : _state$button2.contains(previousActiveElementRef.current)) return;\n            if (state.panel.contains(previousActiveElementRef.current)) return; // Check if the last focused element is *after* the button in the DOM\n\n            var focusableElements = getFocusableElements();\n            var previousIdx = focusableElements.indexOf(previousActiveElementRef.current);\n            var buttonIdx = focusableElements.indexOf(state.button);\n            if (buttonIdx > previousIdx) return;\n            event.preventDefault();\n            event.stopPropagation();\n            focusIn(state.panel, Focus.Last);\n          } else {\n            event.preventDefault();\n            event.stopPropagation();\n            focusIn(state.panel, Focus.First);\n          }\n\n          break;\n      }\n    }\n  }, [dispatch, state.popoverState, state.buttonId, state.button, state.panel, internalButtonRef, closeOthers, isWithinPanel]);\n  var handleKeyUp = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (event) {\n    var _state$button3;\n\n    if (isWithinPanel) return;\n\n    if (event.key === Keys.Space) {\n      // Required for firefox, event.preventDefault() in handleKeyDown for\n      // the Space key doesn't cancel the handleKeyUp, which in turn\n      // triggers a *click*.\n      event.preventDefault();\n    }\n\n    if (state.popoverState !== PopoverStates.Open) return;\n    if (!state.panel) return;\n    if (!state.button) return; // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n\n    switch (event.key) {\n      case Keys.Tab:\n        // Check if the last focused element exists, and check that it is not inside button or panel itself\n        if (!previousActiveElementRef.current) return;\n        if ((_state$button3 = state.button) == null ? void 0 : _state$button3.contains(previousActiveElementRef.current)) return;\n        if (state.panel.contains(previousActiveElementRef.current)) return; // Check if the last focused element is *after* the button in the DOM\n\n        var focusableElements = getFocusableElements();\n        var previousIdx = focusableElements.indexOf(previousActiveElementRef.current);\n        var buttonIdx = focusableElements.indexOf(state.button);\n        if (buttonIdx > previousIdx) return;\n        event.preventDefault();\n        event.stopPropagation();\n        focusIn(state.panel, Focus.Last);\n        break;\n    }\n  }, [state.popoverState, state.panel, state.button, isWithinPanel]);\n  var handleClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (event) {\n    if (isDisabledReactIssue7711(event.currentTarget)) return;\n    if (props.disabled) return;\n\n    if (isWithinPanel) {\n      var _state$button4;\n\n      dispatch({\n        type: ActionTypes$4.ClosePopover\n      });\n      (_state$button4 = state.button) == null ? void 0 : _state$button4.focus(); // Re-focus the original opening Button\n    } else {\n      var _state$button5;\n\n      if (state.popoverState === PopoverStates.Closed) closeOthers == null ? void 0 : closeOthers(state.buttonId);\n      (_state$button5 = state.button) == null ? void 0 : _state$button5.focus();\n      dispatch({\n        type: ActionTypes$4.TogglePopover\n      });\n    }\n  }, [dispatch, state.button, state.popoverState, state.buttonId, props.disabled, closeOthers, isWithinPanel]);\n  var slot = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return {\n      open: state.popoverState === PopoverStates.Open\n    };\n  }, [state]);\n  var passthroughProps = props;\n  var propsWeControl = isWithinPanel ? {\n    type: 'button',\n    onKeyDown: handleKeyDown,\n    onClick: handleClick\n  } : {\n    ref: buttonRef,\n    id: state.buttonId,\n    type: 'button',\n    'aria-expanded': state.popoverState === PopoverStates.Open ? true : undefined,\n    'aria-controls': state.panel ? state.panelId : undefined,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    onClick: handleClick\n  };\n  return render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_BUTTON_TAG$3,\n    name: 'Popover.Button'\n  });\n}); // ---\n\nvar DEFAULT_OVERLAY_TAG$1 = 'div';\nvar OverlayRenderFeatures = Features.RenderStrategy | Features.Static;\nvar Overlay$1 = /*#__PURE__*/forwardRefWithAs(function Overlay(props, ref) {\n  var _usePopoverContext2 = usePopoverContext([Popover.name, Overlay.name].join('.')),\n      popoverState = _usePopoverContext2[0].popoverState,\n      dispatch = _usePopoverContext2[1];\n\n  var overlayRef = useSyncRefs(ref);\n  var id = \"headlessui-popover-overlay-\" + useId();\n  var usesOpenClosedState = useOpenClosed();\n\n  var visible = function () {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open;\n    }\n\n    return popoverState === PopoverStates.Open;\n  }();\n\n  var handleClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (event) {\n    if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault();\n    dispatch({\n      type: ActionTypes$4.ClosePopover\n    });\n  }, [dispatch]);\n  var slot = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return {\n      open: popoverState === PopoverStates.Open\n    };\n  }, [popoverState]);\n  var propsWeControl = {\n    ref: overlayRef,\n    id: id,\n    'aria-hidden': true,\n    onClick: handleClick\n  };\n  var passthroughProps = props;\n  return render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_OVERLAY_TAG$1,\n    features: OverlayRenderFeatures,\n    visible: visible,\n    name: 'Popover.Overlay'\n  });\n}); // ---\n\nvar DEFAULT_PANEL_TAG$1 = 'div';\nvar PanelRenderFeatures$1 = Features.RenderStrategy | Features.Static;\nvar Panel$1 = /*#__PURE__*/forwardRefWithAs(function Panel(props, ref) {\n  var _props$focus = props.focus,\n      focus = _props$focus === void 0 ? false : _props$focus,\n      passthroughProps = _objectWithoutPropertiesLoose(props, [\"focus\"]);\n\n  var _usePopoverContext3 = usePopoverContext([Popover.name, Panel.name].join('.')),\n      state = _usePopoverContext3[0],\n      dispatch = _usePopoverContext3[1];\n\n  var internalPanelRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  var panelRef = useSyncRefs(internalPanelRef, ref, function (panel) {\n    dispatch({\n      type: ActionTypes$4.SetPanel,\n      panel: panel\n    });\n  });\n  var usesOpenClosedState = useOpenClosed();\n\n  var visible = function () {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open;\n    }\n\n    return state.popoverState === PopoverStates.Open;\n  }();\n\n  var handleKeyDown = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (event) {\n    var _state$button6;\n\n    switch (event.key) {\n      case Keys.Escape:\n        if (state.popoverState !== PopoverStates.Open) return;\n        if (!internalPanelRef.current) return;\n        if (!internalPanelRef.current.contains(document.activeElement)) return;\n        event.preventDefault();\n        dispatch({\n          type: ActionTypes$4.ClosePopover\n        });\n        (_state$button6 = state.button) == null ? void 0 : _state$button6.focus();\n        break;\n    }\n  }, [state, internalPanelRef, dispatch]); // Unlink on \"unmount\" myself\n\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    return function () {\n      return dispatch({\n        type: ActionTypes$4.SetPanel,\n        panel: null\n      });\n    };\n  }, [dispatch]); // Unlink on \"unmount\" children\n\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    var _props$unmount;\n\n    if (state.popoverState === PopoverStates.Closed && ((_props$unmount = props.unmount) != null ? _props$unmount : true)) {\n      dispatch({\n        type: ActionTypes$4.SetPanel,\n        panel: null\n      });\n    }\n  }, [state.popoverState, props.unmount, dispatch]); // Move focus within panel\n\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    if (!focus) return;\n    if (state.popoverState !== PopoverStates.Open) return;\n    if (!internalPanelRef.current) return;\n    var activeElement = document.activeElement;\n    if (internalPanelRef.current.contains(activeElement)) return; // Already focused within Dialog\n\n    focusIn(internalPanelRef.current, Focus.First);\n  }, [focus, internalPanelRef, state.popoverState]); // Handle Tab / Shift+Tab focus positioning\n\n  useWindowEvent('keydown', function (event) {\n    if (state.popoverState !== PopoverStates.Open) return;\n    if (!internalPanelRef.current) return;\n    if (event.key !== Keys.Tab) return;\n    if (!document.activeElement) return;\n    if (!internalPanelRef.current) return;\n    if (!internalPanelRef.current.contains(document.activeElement)) return; // We will take-over the default tab behaviour so that we have a bit\n    // control over what is focused next. It will behave exactly the same,\n    // but it will also \"fix\" some issues based on whether you are using a\n    // Portal or not.\n\n    event.preventDefault();\n    var result = focusIn(internalPanelRef.current, event.shiftKey ? Focus.Previous : Focus.Next);\n\n    if (result === FocusResult.Underflow) {\n      var _state$button7;\n\n      return (_state$button7 = state.button) == null ? void 0 : _state$button7.focus();\n    } else if (result === FocusResult.Overflow) {\n      if (!state.button) return;\n      var elements = getFocusableElements();\n      var buttonIdx = elements.indexOf(state.button);\n      var nextElements = elements.splice(buttonIdx + 1) // Elements after button\n      .filter(function (element) {\n        var _internalPanelRef$cur;\n\n        return !((_internalPanelRef$cur = internalPanelRef.current) == null ? void 0 : _internalPanelRef$cur.contains(element));\n      }); // Ignore items in panel\n      // Try to focus the next element, however it could fail if we are in a\n      // Portal that happens to be the very last one in the DOM. In that\n      // case we would Error (because nothing after the button is\n      // focusable). Therefore we will try and focus the very first item in\n      // the document.body.\n\n      if (focusIn(nextElements, Focus.First) === FocusResult.Error) {\n        focusIn(document.body, Focus.First);\n      }\n    }\n  }); // Handle focus out when we are in special \"focus\" mode\n\n  useWindowEvent('focus', function () {\n    var _internalPanelRef$cur2;\n\n    if (!focus) return;\n    if (state.popoverState !== PopoverStates.Open) return;\n    if (!internalPanelRef.current) return;\n    if ((_internalPanelRef$cur2 = internalPanelRef.current) == null ? void 0 : _internalPanelRef$cur2.contains(document.activeElement)) return;\n    dispatch({\n      type: ActionTypes$4.ClosePopover\n    });\n  }, true);\n  var slot = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return {\n      open: state.popoverState === PopoverStates.Open\n    };\n  }, [state]);\n  var propsWeControl = {\n    ref: panelRef,\n    id: state.panelId,\n    onKeyDown: handleKeyDown\n  };\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(PopoverPanelContext.Provider, {\n    value: state.panelId\n  }, render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_PANEL_TAG$1,\n    features: PanelRenderFeatures$1,\n    visible: visible,\n    name: 'Popover.Panel'\n  }));\n}); // ---\n\nvar DEFAULT_GROUP_TAG$1 = 'div';\n\nfunction Group$1(props) {\n  var groupRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n\n  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]),\n      popovers = _useState[0],\n      setPopovers = _useState[1];\n\n  var unregisterPopover = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (registerbag) {\n    setPopovers(function (existing) {\n      var idx = existing.indexOf(registerbag);\n\n      if (idx !== -1) {\n        var clone = existing.slice();\n        clone.splice(idx, 1);\n        return clone;\n      }\n\n      return existing;\n    });\n  }, [setPopovers]);\n  var registerPopover = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (registerbag) {\n    setPopovers(function (existing) {\n      return [].concat(existing, [registerbag]);\n    });\n    return function () {\n      return unregisterPopover(registerbag);\n    };\n  }, [setPopovers, unregisterPopover]);\n  var isFocusWithinPopoverGroup = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {\n    var _groupRef$current;\n\n    var element = document.activeElement;\n    if ((_groupRef$current = groupRef.current) == null ? void 0 : _groupRef$current.contains(element)) return true; // Check if the focus is in one of the button or panel elements. This is important in case you are rendering inside a Portal.\n\n    return popovers.some(function (bag) {\n      var _document$getElementB, _document$getElementB2;\n\n      return ((_document$getElementB = document.getElementById(bag.buttonId)) == null ? void 0 : _document$getElementB.contains(element)) || ((_document$getElementB2 = document.getElementById(bag.panelId)) == null ? void 0 : _document$getElementB2.contains(element));\n    });\n  }, [groupRef, popovers]);\n  var closeOthers = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (buttonId) {\n    for (var _iterator = _createForOfIteratorHelperLoose(popovers), _step; !(_step = _iterator()).done;) {\n      var popover = _step.value;\n      if (popover.buttonId !== buttonId) popover.close();\n    }\n  }, [popovers]);\n  var contextBag = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return {\n      registerPopover: registerPopover,\n      unregisterPopover: unregisterPopover,\n      isFocusWithinPopoverGroup: isFocusWithinPopoverGroup,\n      closeOthers: closeOthers\n    };\n  }, [registerPopover, unregisterPopover, isFocusWithinPopoverGroup, closeOthers]);\n  var slot = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return {};\n  }, []);\n  var propsWeControl = {\n    ref: groupRef\n  };\n  var passthroughProps = props;\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(PopoverGroupContext.Provider, {\n    value: contextBag\n  }, render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_GROUP_TAG$1,\n    name: 'Popover.Group'\n  }));\n} // ---\n\n\nPopover.Button = Button$3;\nPopover.Overlay = Overlay$1;\nPopover.Panel = Panel$1;\nPopover.Group = Group$1;\n\nfunction useFlags(initialFlags) {\n  if (initialFlags === void 0) {\n    initialFlags = 0;\n  }\n\n  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initialFlags),\n      flags = _useState[0],\n      setFlags = _useState[1];\n\n  var addFlag = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (flag) {\n    return setFlags(function (flags) {\n      return flags | flag;\n    });\n  }, [setFlags]);\n  var hasFlag = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (flag) {\n    return Boolean(flags & flag);\n  }, [flags]);\n  var removeFlag = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (flag) {\n    return setFlags(function (flags) {\n      return flags & ~flag;\n    });\n  }, [setFlags]);\n  var toggleFlag = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (flag) {\n    return setFlags(function (flags) {\n      return flags ^ flag;\n    });\n  }, [setFlags]);\n  return {\n    addFlag: addFlag,\n    hasFlag: hasFlag,\n    removeFlag: removeFlag,\n    toggleFlag: toggleFlag\n  };\n}\n\nvar LabelContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\n\nfunction useLabelContext() {\n  var context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(LabelContext);\n\n  if (context === null) {\n    var err = new Error('You used a <Label /> component, but it is not inside a relevant parent.');\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useLabelContext);\n    throw err;\n  }\n\n  return context;\n}\n\nfunction useLabels() {\n  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]),\n      labelIds = _useState[0],\n      setLabelIds = _useState[1];\n\n  return [// The actual id's as string or undefined.\n  labelIds.length > 0 ? labelIds.join(' ') : undefined, // The provider component\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return function LabelProvider(props) {\n      var register = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (value) {\n        setLabelIds(function (existing) {\n          return [].concat(existing, [value]);\n        });\n        return function () {\n          return setLabelIds(function (existing) {\n            var clone = existing.slice();\n            var idx = clone.indexOf(value);\n            if (idx !== -1) clone.splice(idx, 1);\n            return clone;\n          });\n        };\n      }, []);\n      var contextBag = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n        return {\n          register: register,\n          slot: props.slot,\n          name: props.name,\n          props: props.props\n        };\n      }, [register, props.slot, props.name, props.props]);\n      return react__WEBPACK_IMPORTED_MODULE_0__.createElement(LabelContext.Provider, {\n        value: contextBag\n      }, props.children);\n    };\n  }, [setLabelIds])];\n} // ---\n\nvar DEFAULT_LABEL_TAG$1 = 'label';\nfunction Label$1(props) {\n  var _props$passive = props.passive,\n      passive = _props$passive === void 0 ? false : _props$passive,\n      passThroughProps = _objectWithoutPropertiesLoose(props, [\"passive\"]);\n\n  var context = useLabelContext();\n  var id = \"headlessui-label-\" + useId();\n  useIsoMorphicEffect(function () {\n    return context.register(id);\n  }, [id, context.register]);\n\n  var propsWeControl = _extends({}, context.props, {\n    id: id\n  });\n\n  var allProps = _extends({}, passThroughProps, propsWeControl); // @ts-expect-error props are dynamic via context, some components will\n  //                  provide an onClick then we can delete it.\n\n\n  if (passive) delete allProps['onClick'];\n  return render({\n    props: allProps,\n    slot: context.slot || {},\n    defaultTag: DEFAULT_LABEL_TAG$1,\n    name: context.name || 'Label'\n  });\n}\n\nvar _reducers$5;\nvar ActionTypes$5;\n\n(function (ActionTypes) {\n  ActionTypes[ActionTypes[\"RegisterOption\"] = 0] = \"RegisterOption\";\n  ActionTypes[ActionTypes[\"UnregisterOption\"] = 1] = \"UnregisterOption\";\n})(ActionTypes$5 || (ActionTypes$5 = {}));\n\nvar reducers$5 = (_reducers$5 = {}, _reducers$5[ActionTypes$5.RegisterOption] = function (state, action) {\n  return _extends({}, state, {\n    options: [].concat(state.options, [{\n      id: action.id,\n      element: action.element,\n      propsRef: action.propsRef\n    }])\n  });\n}, _reducers$5[ActionTypes$5.UnregisterOption] = function (state, action) {\n  var options = state.options.slice();\n  var idx = state.options.findIndex(function (radio) {\n    return radio.id === action.id;\n  });\n  if (idx === -1) return state;\n  options.splice(idx, 1);\n  return _extends({}, state, {\n    options: options\n  });\n}, _reducers$5);\nvar RadioGroupContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nRadioGroupContext.displayName = 'RadioGroupContext';\n\nfunction useRadioGroupContext(component) {\n  var context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(RadioGroupContext);\n\n  if (context === null) {\n    var err = new Error(\"<\" + component + \" /> is missing a parent <\" + RadioGroup.name + \" /> component.\");\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useRadioGroupContext);\n    throw err;\n  }\n\n  return context;\n}\n\nfunction stateReducer$5(state, action) {\n  return match(action.type, reducers$5, state, action);\n} // ---\n\n\nvar DEFAULT_RADIO_GROUP_TAG = 'div';\nfunction RadioGroup(props) {\n  var value = props.value,\n      onChange = props.onChange,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      passThroughProps = _objectWithoutPropertiesLoose(props, [\"value\", \"onChange\", \"disabled\"]);\n\n  var _useReducer = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(stateReducer$5, {\n    options: []\n  }),\n      options = _useReducer[0].options,\n      dispatch = _useReducer[1];\n\n  var _useLabels = useLabels(),\n      labelledby = _useLabels[0],\n      LabelProvider = _useLabels[1];\n\n  var _useDescriptions = useDescriptions(),\n      describedby = _useDescriptions[0],\n      DescriptionProvider = _useDescriptions[1];\n\n  var id = \"headlessui-radiogroup-\" + useId();\n  var radioGroupRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  var firstOption = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return options.find(function (option) {\n      if (option.propsRef.current.disabled) return false;\n      return true;\n    });\n  }, [options]);\n  var containsCheckedOption = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return options.some(function (option) {\n      return option.propsRef.current.value === value;\n    });\n  }, [options, value]);\n  var triggerChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (nextValue) {\n    var _options$find;\n\n    if (disabled) return false;\n    if (nextValue === value) return false;\n    var nextOption = (_options$find = options.find(function (option) {\n      return option.propsRef.current.value === nextValue;\n    })) == null ? void 0 : _options$find.propsRef.current;\n    if (nextOption == null ? void 0 : nextOption.disabled) return false;\n    onChange(nextValue);\n    return true;\n  }, [onChange, value, disabled, options]);\n  useTreeWalker({\n    container: radioGroupRef.current,\n    accept: function accept(node) {\n      if (node.getAttribute('role') === 'radio') return NodeFilter.FILTER_REJECT;\n      if (node.hasAttribute('role')) return NodeFilter.FILTER_SKIP;\n      return NodeFilter.FILTER_ACCEPT;\n    },\n    walk: function walk(node) {\n      node.setAttribute('role', 'none');\n    }\n  });\n  var handleKeyDown = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (event) {\n    var container = radioGroupRef.current;\n    if (!container) return;\n    var all = options.filter(function (option) {\n      return option.propsRef.current.disabled === false;\n    }).map(function (radio) {\n      return radio.element.current;\n    });\n\n    switch (event.key) {\n      case Keys.ArrowLeft:\n      case Keys.ArrowUp:\n        {\n          event.preventDefault();\n          event.stopPropagation();\n          var result = focusIn(all, Focus.Previous | Focus.WrapAround);\n\n          if (result === FocusResult.Success) {\n            var activeOption = options.find(function (option) {\n              return option.element.current === document.activeElement;\n            });\n            if (activeOption) triggerChange(activeOption.propsRef.current.value);\n          }\n        }\n        break;\n\n      case Keys.ArrowRight:\n      case Keys.ArrowDown:\n        {\n          event.preventDefault();\n          event.stopPropagation();\n\n          var _result = focusIn(all, Focus.Next | Focus.WrapAround);\n\n          if (_result === FocusResult.Success) {\n            var _activeOption = options.find(function (option) {\n              return option.element.current === document.activeElement;\n            });\n\n            if (_activeOption) triggerChange(_activeOption.propsRef.current.value);\n          }\n        }\n        break;\n\n      case Keys.Space:\n        {\n          event.preventDefault();\n          event.stopPropagation();\n\n          var _activeOption2 = options.find(function (option) {\n            return option.element.current === document.activeElement;\n          });\n\n          if (_activeOption2) triggerChange(_activeOption2.propsRef.current.value);\n        }\n        break;\n    }\n  }, [radioGroupRef, options, triggerChange]);\n  var registerOption = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (option) {\n    dispatch(_extends({\n      type: ActionTypes$5.RegisterOption\n    }, option));\n    return function () {\n      return dispatch({\n        type: ActionTypes$5.UnregisterOption,\n        id: option.id\n      });\n    };\n  }, [dispatch]);\n  var api = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return {\n      registerOption: registerOption,\n      firstOption: firstOption,\n      containsCheckedOption: containsCheckedOption,\n      change: triggerChange,\n      disabled: disabled,\n      value: value\n    };\n  }, [registerOption, firstOption, containsCheckedOption, triggerChange, disabled, value]);\n  var propsWeControl = {\n    ref: radioGroupRef,\n    id: id,\n    role: 'radiogroup',\n    'aria-labelledby': labelledby,\n    'aria-describedby': describedby,\n    onKeyDown: handleKeyDown\n  };\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(DescriptionProvider, {\n    name: \"RadioGroup.Description\"\n  }, react__WEBPACK_IMPORTED_MODULE_0__.createElement(LabelProvider, {\n    name: \"RadioGroup.Label\"\n  }, react__WEBPACK_IMPORTED_MODULE_0__.createElement(RadioGroupContext.Provider, {\n    value: api\n  }, render({\n    props: _extends({}, passThroughProps, propsWeControl),\n    defaultTag: DEFAULT_RADIO_GROUP_TAG,\n    name: 'RadioGroup'\n  }))));\n} // ---\n\nvar OptionState;\n\n(function (OptionState) {\n  OptionState[OptionState[\"Empty\"] = 1] = \"Empty\";\n  OptionState[OptionState[\"Active\"] = 2] = \"Active\";\n})(OptionState || (OptionState = {}));\n\nvar DEFAULT_OPTION_TAG$1 = 'div';\n\nfunction Option$1(props) {\n  var optionRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  var id = \"headlessui-radiogroup-option-\" + useId();\n\n  var _useLabels2 = useLabels(),\n      labelledby = _useLabels2[0],\n      LabelProvider = _useLabels2[1];\n\n  var _useDescriptions2 = useDescriptions(),\n      describedby = _useDescriptions2[0],\n      DescriptionProvider = _useDescriptions2[1];\n\n  var _useFlags = useFlags(OptionState.Empty),\n      addFlag = _useFlags.addFlag,\n      removeFlag = _useFlags.removeFlag,\n      hasFlag = _useFlags.hasFlag;\n\n  var value = props.value,\n      _props$disabled2 = props.disabled,\n      disabled = _props$disabled2 === void 0 ? false : _props$disabled2,\n      passThroughProps = _objectWithoutPropertiesLoose(props, [\"value\", \"disabled\"]);\n\n  var propsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n    value: value,\n    disabled: disabled\n  });\n  useIsoMorphicEffect(function () {\n    propsRef.current.value = value;\n  }, [value, propsRef]);\n  useIsoMorphicEffect(function () {\n    propsRef.current.disabled = disabled;\n  }, [disabled, propsRef]);\n\n  var _useRadioGroupContext = useRadioGroupContext([RadioGroup.name, Option$1.name].join('.')),\n      registerOption = _useRadioGroupContext.registerOption,\n      radioGroupDisabled = _useRadioGroupContext.disabled,\n      change = _useRadioGroupContext.change,\n      firstOption = _useRadioGroupContext.firstOption,\n      containsCheckedOption = _useRadioGroupContext.containsCheckedOption,\n      radioGroupValue = _useRadioGroupContext.value;\n\n  useIsoMorphicEffect(function () {\n    return registerOption({\n      id: id,\n      element: optionRef,\n      propsRef: propsRef\n    });\n  }, [id, registerOption, optionRef, props]);\n  var handleClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {\n    var _optionRef$current;\n\n    if (!change(value)) return;\n    addFlag(OptionState.Active);\n    (_optionRef$current = optionRef.current) == null ? void 0 : _optionRef$current.focus();\n  }, [addFlag, change, value]);\n  var handleFocus = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {\n    return addFlag(OptionState.Active);\n  }, [addFlag]);\n  var handleBlur = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {\n    return removeFlag(OptionState.Active);\n  }, [removeFlag]);\n  var isFirstOption = (firstOption == null ? void 0 : firstOption.id) === id;\n  var isDisabled = radioGroupDisabled || disabled;\n  var checked = radioGroupValue === value;\n  var propsWeControl = {\n    ref: optionRef,\n    id: id,\n    role: 'radio',\n    'aria-checked': checked ? 'true' : 'false',\n    'aria-labelledby': labelledby,\n    'aria-describedby': describedby,\n    tabIndex: function () {\n      if (isDisabled) return -1;\n      if (checked) return 0;\n      if (!containsCheckedOption && isFirstOption) return 0;\n      return -1;\n    }(),\n    onClick: isDisabled ? undefined : handleClick,\n    onFocus: isDisabled ? undefined : handleFocus,\n    onBlur: isDisabled ? undefined : handleBlur\n  };\n  var slot = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return {\n      checked: checked,\n      disabled: isDisabled,\n      active: hasFlag(OptionState.Active)\n    };\n  }, [checked, isDisabled, hasFlag]);\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(DescriptionProvider, {\n    name: \"RadioGroup.Description\"\n  }, react__WEBPACK_IMPORTED_MODULE_0__.createElement(LabelProvider, {\n    name: \"RadioGroup.Label\"\n  }, render({\n    props: _extends({}, passThroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_OPTION_TAG$1,\n    name: 'RadioGroup.Option'\n  })));\n} // ---\n\n\nRadioGroup.Option = Option$1;\nRadioGroup.Label = Label$1;\nRadioGroup.Description = Description;\n\nvar GroupContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nGroupContext.displayName = 'GroupContext'; // ---\n\nvar DEFAULT_GROUP_TAG$2 = react__WEBPACK_IMPORTED_MODULE_0__.Fragment;\n\nfunction Group$2(props) {\n  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null),\n      switchElement = _useState[0],\n      setSwitchElement = _useState[1];\n\n  var _useLabels = useLabels(),\n      labelledby = _useLabels[0],\n      LabelProvider = _useLabels[1];\n\n  var _useDescriptions = useDescriptions(),\n      describedby = _useDescriptions[0],\n      DescriptionProvider = _useDescriptions[1];\n\n  var context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return {\n      \"switch\": switchElement,\n      setSwitch: setSwitchElement,\n      labelledby: labelledby,\n      describedby: describedby\n    };\n  }, [switchElement, setSwitchElement, labelledby, describedby]);\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(DescriptionProvider, {\n    name: \"Switch.Description\"\n  }, react__WEBPACK_IMPORTED_MODULE_0__.createElement(LabelProvider, {\n    name: \"Switch.Label\",\n    props: {\n      onClick: function onClick() {\n        if (!switchElement) return;\n        switchElement.click();\n        switchElement.focus({\n          preventScroll: true\n        });\n      }\n    }\n  }, react__WEBPACK_IMPORTED_MODULE_0__.createElement(GroupContext.Provider, {\n    value: context\n  }, render({\n    props: props,\n    defaultTag: DEFAULT_GROUP_TAG$2,\n    name: 'Switch.Group'\n  }))));\n} // ---\n\n\nvar DEFAULT_SWITCH_TAG = 'button';\nfunction Switch(props) {\n  var checked = props.checked,\n      onChange = props.onChange,\n      passThroughProps = _objectWithoutPropertiesLoose(props, [\"checked\", \"onChange\"]);\n\n  var id = \"headlessui-switch-\" + useId();\n  var groupContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(GroupContext);\n  var toggle = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {\n    return onChange(!checked);\n  }, [onChange, checked]);\n  var handleClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (event) {\n    if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault();\n    event.preventDefault();\n    toggle();\n  }, [toggle]);\n  var handleKeyUp = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (event) {\n    if (event.key !== Keys.Tab) event.preventDefault();\n    if (event.key === Keys.Space) toggle();\n  }, [toggle]); // This is needed so that we can \"cancel\" the click event when we use the `Enter` key on a button.\n\n  var handleKeyPress = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (event) {\n    return event.preventDefault();\n  }, []);\n  var slot = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return {\n      checked: checked\n    };\n  }, [checked]);\n  var propsWeControl = {\n    id: id,\n    ref: groupContext === null ? undefined : groupContext.setSwitch,\n    role: 'switch',\n    tabIndex: 0,\n    'aria-checked': checked,\n    'aria-labelledby': groupContext == null ? void 0 : groupContext.labelledby,\n    'aria-describedby': groupContext == null ? void 0 : groupContext.describedby,\n    onClick: handleClick,\n    onKeyUp: handleKeyUp,\n    onKeyPress: handleKeyPress\n  };\n\n  if (passThroughProps.as === 'button') {\n    Object.assign(propsWeControl, {\n      type: 'button'\n    });\n  }\n\n  return render({\n    props: _extends({}, passThroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_SWITCH_TAG,\n    name: 'Switch'\n  });\n} // ---\n\nSwitch.Group = Group$2;\nSwitch.Label = Label$1;\nSwitch.Description = Description;\n\nfunction useIsInitialRender() {\n  var initial = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(true);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    initial.current = false;\n  }, []);\n  return initial.current;\n}\n\nfunction once(cb) {\n  var state = {\n    called: false\n  };\n  return function () {\n    if (state.called) return;\n    state.called = true;\n    return cb.apply(void 0, arguments);\n  };\n}\n\nfunction addClasses(node) {\n  var _node$classList;\n\n  for (var _len = arguments.length, classes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    classes[_key - 1] = arguments[_key];\n  }\n\n  node && classes.length > 0 && (_node$classList = node.classList).add.apply(_node$classList, classes);\n}\n\nfunction removeClasses(node) {\n  var _node$classList2;\n\n  for (var _len2 = arguments.length, classes = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    classes[_key2 - 1] = arguments[_key2];\n  }\n\n  node && classes.length > 0 && (_node$classList2 = node.classList).remove.apply(_node$classList2, classes);\n}\n\nvar Reason;\n\n(function (Reason) {\n  Reason[\"Finished\"] = \"finished\";\n  Reason[\"Cancelled\"] = \"cancelled\";\n})(Reason || (Reason = {}));\n\nfunction waitForTransition(node, done) {\n  var d = disposables();\n  if (!node) return d.dispose; // Safari returns a comma separated list of values, so let's sort them and take the highest value.\n\n  var _getComputedStyle = getComputedStyle(node),\n      transitionDuration = _getComputedStyle.transitionDuration,\n      transitionDelay = _getComputedStyle.transitionDelay;\n\n  var _map = [transitionDuration, transitionDelay].map(function (value) {\n    var _value$split$filter$m = value.split(',') // Remove falsy we can't work with\n    .filter(Boolean) // Values are returned as `0.3s` or `75ms`\n    .map(function (v) {\n      return v.includes('ms') ? parseFloat(v) : parseFloat(v) * 1000;\n    }).sort(function (a, z) {\n      return z - a;\n    }),\n        _value$split$filter$m2 = _value$split$filter$m[0],\n        resolvedValue = _value$split$filter$m2 === void 0 ? 0 : _value$split$filter$m2;\n\n    return resolvedValue;\n  }),\n      durationMs = _map[0],\n      delaysMs = _map[1]; // Waiting for the transition to end. We could use the `transitionend` event, however when no\n  // actual transition/duration is defined then the `transitionend` event is not fired.\n  //\n  // TODO: Downside is, when you slow down transitions via devtools this timeout is still using the\n  // full 100% speed instead of the 25% or 10%.\n\n\n  if (durationMs !== 0) {\n    d.setTimeout(function () {\n      done(Reason.Finished);\n    }, durationMs + delaysMs);\n  } else {\n    // No transition is happening, so we should cleanup already. Otherwise we have to wait until we\n    // get disposed.\n    done(Reason.Finished);\n  } // If we get disposed before the timeout runs we should cleanup anyway\n\n\n  d.add(function () {\n    return done(Reason.Cancelled);\n  });\n  return d.dispose;\n}\n\nfunction transition(node, base, from, to, done) {\n  var d = disposables();\n\n  var _done = done !== undefined ? once(done) : function () {};\n\n  addClasses.apply(void 0, [node].concat(base, from));\n  d.nextFrame(function () {\n    removeClasses.apply(void 0, [node].concat(from));\n    addClasses.apply(void 0, [node].concat(to));\n    d.add(waitForTransition(node, function (reason) {\n      removeClasses.apply(void 0, [node].concat(to, base));\n      return _done(reason);\n    }));\n  }); // Once we get disposed, we should ensure that we cleanup after ourselves. In case of an unmount,\n  // the node itself will be nullified and will be a no-op. In case of a full transition the classes\n  // are already removed which is also a no-op. However if you go from enter -> leave mid-transition\n  // then we have some leftovers that should be cleaned.\n\n  d.add(function () {\n    return removeClasses.apply(void 0, [node].concat(base, from, to));\n  }); // When we get disposed early, than we should also call the done method but switch the reason.\n\n  d.add(function () {\n    return _done(Reason.Cancelled);\n  });\n  return d.dispose;\n}\n\nfunction useSplitClasses(classes) {\n  if (classes === void 0) {\n    classes = '';\n  }\n\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return classes.split(' ').filter(function (className) {\n      return className.trim().length > 1;\n    });\n  }, [classes]);\n}\n\nvar TransitionContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nTransitionContext.displayName = 'TransitionContext';\nvar TreeStates;\n\n(function (TreeStates) {\n  TreeStates[\"Visible\"] = \"visible\";\n  TreeStates[\"Hidden\"] = \"hidden\";\n})(TreeStates || (TreeStates = {}));\n\nfunction useTransitionContext() {\n  var context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(TransitionContext);\n\n  if (context === null) {\n    throw new Error('A <Transition.Child /> is used but it is missing a parent <Transition /> or <Transition.Root />.');\n  }\n\n  return context;\n}\n\nfunction useParentNesting() {\n  var context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(NestingContext);\n\n  if (context === null) {\n    throw new Error('A <Transition.Child /> is used but it is missing a parent <Transition /> or <Transition.Root />.');\n  }\n\n  return context;\n}\n\nvar NestingContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nNestingContext.displayName = 'NestingContext';\n\nfunction hasChildren(bag) {\n  if ('children' in bag) return hasChildren(bag.children);\n  return bag.current.filter(function (_ref) {\n    var state = _ref.state;\n    return state === TreeStates.Visible;\n  }).length > 0;\n}\n\nfunction useNesting(done) {\n  var doneRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(done);\n  var transitionableChildren = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)([]);\n  var mounted = useIsMounted();\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    doneRef.current = done;\n  }, [done]);\n  var unregister = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (childId, strategy) {\n    var _match;\n\n    if (strategy === void 0) {\n      strategy = RenderStrategy.Hidden;\n    }\n\n    var idx = transitionableChildren.current.findIndex(function (_ref2) {\n      var id = _ref2.id;\n      return id === childId;\n    });\n    if (idx === -1) return;\n    match(strategy, (_match = {}, _match[RenderStrategy.Unmount] = function () {\n      transitionableChildren.current.splice(idx, 1);\n    }, _match[RenderStrategy.Hidden] = function () {\n      transitionableChildren.current[idx].state = TreeStates.Hidden;\n    }, _match));\n\n    if (!hasChildren(transitionableChildren) && mounted.current) {\n      doneRef.current == null ? void 0 : doneRef.current();\n    }\n  }, [doneRef, mounted, transitionableChildren]);\n  var register = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (childId) {\n    var child = transitionableChildren.current.find(function (_ref3) {\n      var id = _ref3.id;\n      return id === childId;\n    });\n\n    if (!child) {\n      transitionableChildren.current.push({\n        id: childId,\n        state: TreeStates.Visible\n      });\n    } else if (child.state !== TreeStates.Visible) {\n      child.state = TreeStates.Visible;\n    }\n\n    return function () {\n      return unregister(childId, RenderStrategy.Unmount);\n    };\n  }, [transitionableChildren, unregister]);\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return {\n      children: transitionableChildren,\n      register: register,\n      unregister: unregister\n    };\n  }, [register, unregister, transitionableChildren]);\n}\n\nfunction noop() {}\n\nvar eventNames = ['beforeEnter', 'afterEnter', 'beforeLeave', 'afterLeave'];\n\nfunction ensureEventHooksExist(events) {\n  var result = {};\n\n  for (var _iterator = _createForOfIteratorHelperLoose(eventNames), _step; !(_step = _iterator()).done;) {\n    var _events$name;\n\n    var name = _step.value;\n    result[name] = (_events$name = events[name]) != null ? _events$name : noop;\n  }\n\n  return result;\n}\n\nfunction useEvents(events) {\n  var eventsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(ensureEventHooksExist(events));\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    eventsRef.current = ensureEventHooksExist(events);\n  }, [events]);\n  return eventsRef;\n} // ---\n\n\nvar DEFAULT_TRANSITION_CHILD_TAG = 'div';\nvar TransitionChildRenderFeatures = Features.RenderStrategy;\n\nfunction TransitionChild(props) {\n  var _match3;\n\n  var beforeEnter = props.beforeEnter,\n      afterEnter = props.afterEnter,\n      beforeLeave = props.beforeLeave,\n      afterLeave = props.afterLeave,\n      enter = props.enter,\n      enterFrom = props.enterFrom,\n      enterTo = props.enterTo,\n      leave = props.leave,\n      leaveFrom = props.leaveFrom,\n      leaveTo = props.leaveTo,\n      rest = _objectWithoutPropertiesLoose(props, [\"beforeEnter\", \"afterEnter\", \"beforeLeave\", \"afterLeave\", \"enter\", \"enterFrom\", \"enterTo\", \"leave\", \"leaveFrom\", \"leaveTo\"]);\n\n  var container = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n\n  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(TreeStates.Visible),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var strategy = rest.unmount ? RenderStrategy.Unmount : RenderStrategy.Hidden;\n\n  var _useTransitionContext = useTransitionContext(),\n      show = _useTransitionContext.show,\n      appear = _useTransitionContext.appear;\n\n  var _useParentNesting = useParentNesting(),\n      register = _useParentNesting.register,\n      unregister = _useParentNesting.unregister;\n\n  var initial = useIsInitialRender();\n  var id = useId();\n  var isTransitioning = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n  var nesting = useNesting(function () {\n    // When all children have been unmounted we can only hide ourselves if and only if we are not\n    // transitioning ourselves. Otherwise we would unmount before the transitions are finished.\n    if (!isTransitioning.current) {\n      setState(TreeStates.Hidden);\n      unregister(id);\n      events.current.afterLeave();\n    }\n  });\n  useIsoMorphicEffect(function () {\n    if (!id) return;\n    return register(id);\n  }, [register, id]);\n  useIsoMorphicEffect(function () {\n    var _match2;\n\n    // If we are in another mode than the Hidden mode then ignore\n    if (strategy !== RenderStrategy.Hidden) return;\n    if (!id) return; // Make sure that we are visible\n\n    if (show && state !== TreeStates.Visible) {\n      setState(TreeStates.Visible);\n      return;\n    }\n\n    match(state, (_match2 = {}, _match2[TreeStates.Hidden] = function () {\n      return unregister(id);\n    }, _match2[TreeStates.Visible] = function () {\n      return register(id);\n    }, _match2));\n  }, [state, id, register, unregister, show, strategy]);\n  var enterClasses = useSplitClasses(enter);\n  var enterFromClasses = useSplitClasses(enterFrom);\n  var enterToClasses = useSplitClasses(enterTo);\n  var leaveClasses = useSplitClasses(leave);\n  var leaveFromClasses = useSplitClasses(leaveFrom);\n  var leaveToClasses = useSplitClasses(leaveTo);\n  var events = useEvents({\n    beforeEnter: beforeEnter,\n    afterEnter: afterEnter,\n    beforeLeave: beforeLeave,\n    afterLeave: afterLeave\n  });\n  var ready = useServerHandoffComplete();\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    if (ready && state === TreeStates.Visible && container.current === null) {\n      throw new Error('Did you forget to passthrough the `ref` to the actual DOM node?');\n    }\n  }, [container, state, ready]); // Skipping initial transition\n\n  var skip = initial && !appear;\n  useIsoMorphicEffect(function () {\n    var node = container.current;\n    if (!node) return;\n    if (skip) return;\n    isTransitioning.current = true;\n    if (show) events.current.beforeEnter();\n    if (!show) events.current.beforeLeave();\n    return show ? transition(node, enterClasses, enterFromClasses, enterToClasses, function (reason) {\n      isTransitioning.current = false;\n      if (reason === Reason.Finished) events.current.afterEnter();\n    }) : transition(node, leaveClasses, leaveFromClasses, leaveToClasses, function (reason) {\n      isTransitioning.current = false;\n      if (reason !== Reason.Finished) return; // When we don't have children anymore we can safely unregister from the parent and hide\n      // ourselves.\n\n      if (!hasChildren(nesting)) {\n        setState(TreeStates.Hidden);\n        unregister(id);\n        events.current.afterLeave();\n      }\n    });\n  }, [events, id, isTransitioning, unregister, nesting, container, skip, show, enterClasses, enterFromClasses, enterToClasses, leaveClasses, leaveFromClasses, leaveToClasses]);\n  var propsWeControl = {\n    ref: container\n  };\n  var passthroughProps = rest;\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(NestingContext.Provider, {\n    value: nesting\n  }, react__WEBPACK_IMPORTED_MODULE_0__.createElement(OpenClosedProvider, {\n    value: match(state, (_match3 = {}, _match3[TreeStates.Visible] = State.Open, _match3[TreeStates.Hidden] = State.Closed, _match3))\n  }, render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    defaultTag: DEFAULT_TRANSITION_CHILD_TAG,\n    features: TransitionChildRenderFeatures,\n    visible: state === TreeStates.Visible,\n    name: 'Transition.Child'\n  })));\n}\n\nfunction Transition(props) {\n  // @ts-expect-error\n  var show = props.show,\n      _props$appear = props.appear,\n      appear = _props$appear === void 0 ? false : _props$appear,\n      unmount = props.unmount,\n      passthroughProps = _objectWithoutPropertiesLoose(props, [\"show\", \"appear\", \"unmount\"]);\n\n  var usesOpenClosedState = useOpenClosed();\n\n  if (show === undefined && usesOpenClosedState !== null) {\n    var _match4;\n\n    show = match(usesOpenClosedState, (_match4 = {}, _match4[State.Open] = true, _match4[State.Closed] = false, _match4));\n  }\n\n  if (![true, false].includes(show)) {\n    throw new Error('A <Transition /> is used but it is missing a `show={true | false}` prop.');\n  }\n\n  var _useState2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(show ? TreeStates.Visible : TreeStates.Hidden),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var nestingBag = useNesting(function () {\n    setState(TreeStates.Hidden);\n  });\n  var initial = useIsInitialRender();\n  var transitionBag = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return {\n      show: show,\n      appear: appear || !initial\n    };\n  }, [show, appear, initial]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    if (show) {\n      setState(TreeStates.Visible);\n    } else if (!hasChildren(nestingBag)) {\n      setState(TreeStates.Hidden);\n    }\n  }, [show, nestingBag]);\n  var sharedProps = {\n    unmount: unmount\n  };\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(NestingContext.Provider, {\n    value: nestingBag\n  }, react__WEBPACK_IMPORTED_MODULE_0__.createElement(TransitionContext.Provider, {\n    value: transitionBag\n  }, render({\n    props: _extends({}, sharedProps, {\n      as: react__WEBPACK_IMPORTED_MODULE_0__.Fragment,\n      children: react__WEBPACK_IMPORTED_MODULE_0__.createElement(TransitionChild, Object.assign({}, sharedProps, passthroughProps))\n    }),\n    defaultTag: react__WEBPACK_IMPORTED_MODULE_0__.Fragment,\n    features: TransitionChildRenderFeatures,\n    visible: state === TreeStates.Visible,\n    name: 'Transition'\n  })));\n}\nTransition.Child = TransitionChild;\nTransition.Root = Transition;\n\n\n//# sourceMappingURL=headlessui.esm.js.map\n\n\n//# sourceURL=webpack://cs50w-final-project/./node_modules/@headlessui/react/dist/headlessui.esm.js?");

/***/ })

}]);